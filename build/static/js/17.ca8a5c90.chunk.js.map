{"version":3,"sources":["views/LimitProfile/limit-profile.jsx","config.js"],"names":["Users","useHistory","queryPage","useLocation","search","match","currentPage","Number","useState","page","setPage","limitData","setLimitData","createSettlement","setCreate","success","setSuccess","deleteSuccess","deleteErr","setDelErr","error","setError","msg","setMsg","load","setLoad","limitType","setLimit","scalingThreshold","setThreshold","singleTransactionLimit","setSingleTransaction","dailyCumulativeTransactionLimit","setDailyCumulative","globalLimit","setGlobalLimit","usdscalingThreshold","setUsdThreshold","usdsingleTransactionLimit","setUsdSingleTransaction","usddailyCumulativeTransactionLimit","setUsdDailyCumulative","usdglobalLimit","setUsdGlobalLimit","updateState","setUpdateState","id","setID","configDatas","setConfigsData","fill","setFill","getLimitProfile","axios","get","config","baseUrl","then","res","status","data","catch","err","useEffect","getLimitProfileSettlemts","headers","Authorization","sessionStorage","getItem","console","log","map","NGNScalingThreshold","ngnScalingThreshold","NGNSingleTransactionLimit","ngnSingleTransactionLimit","NGNDailyCumulativeTransactionLimit","ngnDailyCumulativeTransactionLimit","usdScalingThreshold","usdSingleTransactionLimit","usdDailyCumulativeTransactionLimit","confirmDelete","e","preventDefault","Modal","confirm","title","icon","okText","okType","cancelText","onOk","delete","setTimeout","undefined","response","message","deleteFunc","onCancel","updateFunc","limitTypes","color","className","type","class","onClick","items","fields","key","name","hover","striped","activePage","scopedSlots","Actions","item","bind","clickableRows","visible","footer","maskClosable","htmlFor","custom","onChange","target","value","selected","required","put","post","role","style","width","height","process"],"mappings":"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","file":"static/js/17.ca8a5c90.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { ExclamationCircleOutlined } from '@ant-design/icons'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CInput,\n  CLabel,\n  CFormGroup,\n  CDataTable,\n  CRow,\n  CSelect,\n  CButton,\n  CAlert,\n  CPagination\n} from '@coreui/react'\nimport config from '../../config'\nimport axios from 'axios'\nimport { Modal } from 'antd'\nconst Users = () => {\n  const history = useHistory()\n  const queryPage = useLocation().search.match(/page=([0-9]+)/, '')\n  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1)\n  const [page, setPage] = useState(currentPage)\n  const [limitData, setLimitData] = useState([])\n  const [createSettlement, setCreate] = useState(false)\n\n  const [success, setSuccess] = useState(false)\n  const [deleteSuccess, setDelSuccess] = useState(false)\n  const [deleteErr, setDelErr] = useState(false)\n\n  const [error, setError] = useState(false)\n  const [msg, setMsg] = useState('')\n  const [load, setLoad] = useState(false)\n  const [limitType, setLimit] = useState('')\n  const [scalingThreshold, setThreshold] = useState('')\n  const [singleTransactionLimit, setSingleTransaction] = useState('')\n  const [dailyCumulativeTransactionLimit, setDailyCumulative] = useState('')\n  const [globalLimit, setGlobalLimit] = useState('')\n\n  const [usdscalingThreshold, setUsdThreshold] = useState('')\n  const [usdsingleTransactionLimit, setUsdSingleTransaction] = useState('')\n  const [usddailyCumulativeTransactionLimit, setUsdDailyCumulative] = useState(\n    ''\n  )\n  const [usdglobalLimit, setUsdGlobalLimit] = useState('')\n\n  const [updateState, setUpdateState] = useState('')\n  const [id, setID] = useState('')\n  const [configDatas, setConfigsData] = useState({})\n  const [fill, setFill] = useState(false)\n\n  const closeCreate = () => {\n    setCreate(false)\n    setSingleTransaction('')\n    setDailyCumulative('')\n    setLimit('')\n    setGlobalLimit('')\n    setThreshold('')\n  }\n\n  const pageChange = newPage => {\n    currentPage !== newPage &&\n      axios\n        .get(\n          `${config.baseUrl}/api/v1/admin/transactions/transfer?pageNumber=${newPage}&pageSize=10`,\n          {\n            headers: {\n              Authorization: `Bearer ${sessionStorage.getItem('token')}`\n            }\n          }\n        )\n        .then(res => {\n          if (res.status === 200) {\n            setLimitData(\n              res.data.records.map(data => ({\n                reference: data.reference,\n                firstName: data.traderXUser.firstName,\n                id: data.id,\n                lastName: data.traderXUser.lastName,\n                emailAddress: data.traderXUser.emailAddress,\n                amount: Intl.NumberFormat('en-US').format(data.amount),\n                provider: data.provider.replace('_', ' '),\n                transactionStatus: data.transactionStatus,\n\n                country: data.traderXUser.country.replace('_', ' ')\n              }))\n            )\n          }\n        })\n        .catch(err => {\n          if (err) {\n          }\n        })\n  }\n\n  const addLimit = () => {\n    if (\n      limitType &&\n      scalingThreshold &&\n      singleTransactionLimit &&\n      dailyCumulativeTransactionLimit\n    ) {\n      setLoad(true)\n      axios\n        .post(\n          `${config.baseUrl}/api/v1/admin/limit-profile\n      `,\n          {\n            limitType: limitType,\n            ngnScalingThreshold: scalingThreshold,\n            ngnSingleTransactionLimit: singleTransactionLimit,\n            ngnDailyCumulativeTransactionLimit: dailyCumulativeTransactionLimit,\n            usdScalingThreshold: usdscalingThreshold,\n            usdSingleTransactionLimit: usdsingleTransactionLimit,\n            usdDailyCumulativeTransactionLimit: usddailyCumulativeTransactionLimit\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${sessionStorage.getItem('token')}`\n            }\n          }\n        )\n        .then(res => {\n          setLoad(false)\n          if (res.status === 201) {\n            setSuccess(true)\n            setSingleTransaction('')\n            getLimitProfileSettlemts()\n            setDailyCumulative('')\n            setLimit('')\n            setGlobalLimit('')\n            setThreshold('')\n            setMsg('Limit Profile Created Successfully')\n            setTimeout(() => {\n              setMsg('')\n              setCreate(false)\n              setSuccess(false)\n            }, 2500)\n            getLimitProfile()\n          }\n        })\n        .catch(err => {\n          setLoad(false)\n          if (err.response !== undefined) {\n            setMsg(err.response.data.message)\n            setError(true)\n            setSuccess(false)\n            setTimeout(() => {\n              setMsg('')\n              setError(false)\n            }, 2500)\n          } else {\n            setMsg('Connection Error')\n            setError(true)\n            setSuccess(false)\n          }\n        })\n    } else {\n      // setError(true)\n      // setMsg(\"All fie\")\n      setFill(true)\n      setTimeout(() => {\n        setFill(false)\n      }, 2500)\n    }\n  }\n\n  const getLimitProfile = () => {\n    axios\n      .get(`${config.baseUrl}/api/v1/configurations`)\n      .then(res => {\n        if (res.status === 200) {\n          setConfigsData(res.data)\n        }\n      })\n      .catch(err => {\n        if (err) {\n        }\n      })\n  }\n\n  const update = () => {\n    setLoad(true)\n    console.log(id)\n    axios\n      .put(\n        `${config.baseUrl}/api/v1/admin/limit-profile/${id}`,\n        {\n        \n          ngnScalingThreshold: scalingThreshold,\n          ngnSingleTransactionLimit: singleTransactionLimit,\n          ngnDailyCumulativeTransactionLimit: dailyCumulativeTransactionLimit,\n          usdScalingThreshold: usdscalingThreshold,\n          usdSingleTransactionLimit: usdsingleTransactionLimit,\n          usdDailyCumulativeTransactionLimit: usddailyCumulativeTransactionLimit\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('token')}`\n          }\n        }\n      )\n      .then(res => {\n        setLoad(false)\n        if (res.status === 200) {\n          setSuccess(true)\n          setSingleTransaction('')\n          getLimitProfileSettlemts()\n          setDailyCumulative('')\n          setLimit('')\n          setGlobalLimit('')\n          setThreshold('')\n          setMsg('Limit Profile Updated Successfully')\n          setTimeout(() => {\n            setMsg('')\n            setSuccess(false)\n            setCreate(false)\n          }, 2500)\n          getLimitProfile()\n        }\n      })\n      .catch(err => {\n        setLoad(false)\n        if (err.response !== undefined) {\n          setMsg(err.response.data.message)\n          setError(true)\n          setSuccess(false)\n          setTimeout(() => {\n            setMsg('')\n            setCreate(false)\n            setError(false)\n          }, 2500)\n        } else {\n          setMsg('Connection Error')\n          setError(true)\n          setSuccess(false)\n        }\n      })\n  }\n\n  useEffect(() => {\n    getLimitProfileSettlemts()\n    getLimitProfile()\n    currentPage !== page && setPage(currentPage)\n  }, [currentPage, page])\n\n  const getLimitProfileSettlemts = () => {\n    axios\n      .get(\n        `${config.baseUrl}/api/v1/admin/limit-profile/all\n        `,\n        {\n          headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('token')}`\n          }\n        }\n      )\n      .then(res => {\n        if (res.data) {\n          console.log(limitData)\n          setLimitData(\n            res.data.map(data => ({\n              limitType: data.limitType,\n              NGNScalingThreshold: data.ngnScalingThreshold,\n              id: data.id,\n              NGNSingleTransactionLimit: data.ngnSingleTransactionLimit,\n              NGNDailyCumulativeTransactionLimit:\n                data.ngnDailyCumulativeTransactionLimit,\n\n              usdscalingThreshold: data.usdScalingThreshold,\n              id: data.id,\n              usdsingleTransactionLimit: data.usdSingleTransactionLimit,\n              usddailyCumulativeTransactionLimit:\n                data.usdDailyCumulativeTransactionLimit\n            }))\n          )\n        }\n      })\n      .catch(err => {\n        if (err) {\n        }\n      })\n  }\n\n  const deleteFunc = id => {\n    console.log(id)\n    setLoad(true)\n    axios\n      .delete(\n        `${config.baseUrl}/api/v1/admin/limit-profile/${id.id}\n      `,\n        {\n          headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('token')}`\n          }\n        }\n      )\n      .then(res => {\n        setLoad(false)\n        if (res.status === 200) {\n          setDelErr(true)\n          setMsg('Limit Profile Deleted Successfully')\n          getLimitProfileSettlemts()\n          setTimeout(() => {\n            setMsg('')\n            setDelErr(false)\n          }, 2500)\n          getLimitProfile()\n        }\n      })\n      .catch(err => {\n        setLoad(false)\n        if (err.response !== undefined) {\n          setMsg(err.response.data.message)\n          setDelErr(true)\n          setTimeout(() => {\n            setMsg('')\n            setDelErr(false)\n          }, 2500)\n        } else {\n          setMsg('Connection Error')\n          setDelErr(false)\n        }\n      })\n  }\n\n  const confirmDelete = (id, e) => {\n    e.preventDefault()\n    Modal.confirm({\n      title: `Are you sure you want to delete this limit profile?`,\n      icon: <ExclamationCircleOutlined />,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk () {\n        deleteFunc(id)\n      },\n      onCancel () {\n        console.log('Cancel')\n      }\n    })\n  }\n  const createSettlementFunc = () => {\n    setUpdateState(false)\n    setCreate(true)\n  }\n\n  const updateFunc = id => {\n    console.log(id)\n    setID(id.id)\n    setLimit(id.limitType)\n    setSingleTransaction(id.NGNSingleTransactionLimit)\n    setDailyCumulative(id.NGNDailyCumulativeTransactionLimit)\n    setThreshold(id.NGNScalingThreshold)\n\n    setUsdSingleTransaction(id.usdsingleTransactionLimit)\n    setUsdDailyCumulative(id.usddailyCumulativeTransactionLimit)\n    setUsdThreshold(id.usdscalingThreshold)\n    setUpdateState(true)\n    setCreate(true)\n  }\n\n  return (\n    <>\n      {configDatas.limitTypes && (\n        <CRow>\n          <CCol>\n            {deleteSuccess && <CAlert color='success'>{msg}</CAlert>}\n\n            {deleteErr && <CAlert color='danger'>{msg}</CAlert>}\n            <CCard>\n              <CCardHeader>\n                <div className='d-flex justify-content-between align-items-center'>\n                  <div>Limit Profile </div>\n                  <button\n                    type='button'\n                    class='btn btn-primary mr-2'\n                    onClick={createSettlementFunc}\n                  >\n                    Create Limit\n                  </button>\n                </div>\n              </CCardHeader>\n              <CCardBody>\n                <CDataTable\n                  items={limitData}\n                  fields={[\n                    { key: 'limitType', name: 'Limit Type' },\n                    {\n                      key: 'NGNDailyCumulativeTransactionLimit',\n                      name: 'NGN Daily Cummulative Transaction Limit'\n                    },\n                    {\n                      key: 'NGNScalingThreshold',\n                      name: 'NGN Scaling Thresold'\n                    },\n                    {\n                      key: 'NGNSingleTransactionLimit',\n                      name: 'NGN Single Transaction Limit'\n                    },\n\n                    {\n                      key: 'usddailyCumulativeTransactionLimit',\n                      name: 'USD Daily Cummulative Transaction Limit'\n                    },\n                    {\n                      key: 'usdscalingThreshold',\n                      name: 'USD Scaling Thresold'\n                    },\n                    {\n                      key: 'usdsingleTransactionLimit',\n                      name: 'USD Single Transaction Limit'\n                    },\n\n                    {\n                      key: 'Actions',\n                      name: 'Actions'\n                    }\n                  ]}\n                  hover\n                  striped\n                  activePage={page}\n                  scopedSlots={{\n                    Actions: item => (\n                      <td className='d-flex'>\n                        <button\n                          type='button'\n                          class='btn btn-success mr-2'\n                          onClick={updateFunc.bind(this, item)}\n                        >\n                          Update\n                        </button>\n                        <button\n                          type='button'\n                          class='btn btn-danger'\n                          onClick={confirmDelete.bind(this, item)}\n                        >\n                          Delete\n                        </button>\n                      </td>\n                    )\n                  }}\n                  clickableRows\n                />\n                {/* <CPagination\n                  activePage={page}\n                  onActivePageChange={pageChange}\n                  pages={5}\n                  doubleArrows={false}\n                  align='center'\n                /> */}\n              </CCardBody>\n            </CCard>\n          </CCol>\n\n          <Modal\n            title={\n              updateState ? 'Update Limit Profile' : 'Create Limit Profile'\n            }\n            visible={createSettlement}\n            footer={null}\n            maskClosable={false}\n            onCancel={closeCreate}\n          >\n            <div className='container'>\n              {fill && (\n                <p className='text-danger text-center'>\n                  All fields are required{' '}\n                </p>\n              )}\n              <form>\n                {success && <CAlert color='success'>{msg}</CAlert>}\n\n                {error && <CAlert color='danger'>{msg}</CAlert>}\n                {!updateState ? (\n                  <>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Limit Type</CLabel>\n                      <CSelect\n                        custom\n                        name='ccmonth'\n                        id='ccmonth'\n                        onChange={e => setLimit(e.target.value)}\n                        value={limitType}\n                      >\n                        <option selected>Select</option>\n                        {configDatas.limitTypes.map(data => {\n                          return <option value={data}>{data}</option>\n                        })}\n                      </CSelect>{' '}\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>NGN Scaling Threshold</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setThreshold(e.target.value)}\n                        value={scalingThreshold}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>USD Scaling Threshold</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setUsdThreshold(e.target.value)}\n                        value={usdscalingThreshold}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>\n                        NGN Single Transaction Limit\n                      </CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setSingleTransaction(e.target.value)}\n                        value={singleTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>\n                        USD Single Transaction Limit\n                      </CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setUsdSingleTransaction(e.target.value)}\n                        value={usdsingleTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>\n                        NGN Daily Cummulative Transaction Limit\n                      </CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setDailyCumulative(e.target.value)}\n                        value={dailyCumulativeTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>\n                        USD Daily Cummulative Transaction Limit\n                      </CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setUsdDailyCumulative(e.target.value)}\n                        value={usddailyCumulativeTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>NGN Global Limit</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setGlobalLimit(e.target.value)}\n                        value={globalLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>USD Global Limit</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setUsdGlobalLimit(e.target.value)}\n                        value={usdglobalLimit}\n                      />\n                    </CFormGroup>\n                  </>\n                ) : (\n                  <>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Limit Type</CLabel>\n                      <CSelect\n                        custom\n                        name='ccmonth'\n                        id='ccmonth'\n                        onChange={e => setLimit(e.target.value)}\n                        value={limitType}\n                      >\n                        <option selected>Select</option>\n                        {configDatas.limitTypes.map(data => {\n                          return <option value={data}>{data}</option>\n                        })}\n                      </CSelect>{' '}\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>NGN Scaling Threshold</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setThreshold(e.target.value)}\n                        value={scalingThreshold}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>USD Scaling Threshold</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setUsdThreshold(e.target.value)}\n                        value={usdscalingThreshold}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>\n                        NGN Single Transaction Limit\n                      </CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setSingleTransaction(e.target.value)}\n                        value={singleTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>\n                        USD Single Transaction Limit\n                      </CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setUsdSingleTransaction(e.target.value)}\n                        value={usdsingleTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>\n                        NGN Daily Cummulative Transaction Limit\n                      </CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setDailyCumulative(e.target.value)}\n                        value={dailyCumulativeTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>\n                        USD Daily Cummulative Transaction Limit\n                      </CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setUsdDailyCumulative(e.target.value)}\n                        value={usddailyCumulativeTransactionLimit}\n                      />\n                    </CFormGroup>\n         \n                  </>\n                )}\n                <br />\n                <div className='d-flex justify-content-end'>\n                  <button\n                    type='button'\n                    class='btn btn-primary mr-2'\n                    onClick={!updateState ? addLimit : update}\n                  >\n                    {load ? (\n                      <div\n                        class='spinner-border'\n                        role='status'\n                        style={{ width: '1rem', height: '1rem' }}\n                      >\n                        <span class='sr-only'>Loading...</span>\n                      </div>\n                    ) : (\n                      'Submit'\n                    )}\n                  </button>\n                </div>\n              </form>\n            </div>\n          </Modal>\n        </CRow>\n      )}\n    </>\n  )\n}\n\nexport default Users\n","export default {\n    baseUrl: process.env.REACT_APP_API_END_POINT\n};\nconsole.log(process.env.REACT_APP_API_END_POINT)"],"sourceRoot":""}