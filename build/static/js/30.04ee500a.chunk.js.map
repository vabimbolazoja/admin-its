{"version":3,"sources":["views/transactions/withdrawal.jsx","config.js"],"names":["Users","useHistory","useState","depositDatas","setDepositDatas","page","setPage","totalItems","setTotalItems","getBadge","status","useEffect","getUsers","axios","get","config","baseUrl","headers","Authorization","sessionStorage","getItem","then","res","data","totalPages","records","map","reference","date","createdOn","slice","accName","accountName","accNum","accountNumber","bank","bankName","emailAddress","traderXUser","amount","currency","Intl","NumberFormat","format","provider","replace","transactionStatus","country","catch","err","items","fields","key","name","scopedSlots","item","color","clickableRows","className","current","total","defaultPageSize","showTotal","range","onChange","pageSize","console","log","queryString","getPaged","process"],"mappings":"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","file":"static/js/30.04ee500a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CPagination\n} from '@coreui/react'\nimport config from '../../config'\nimport axios from 'axios'\nimport {Pagination} from \"antd\"\n\nconst Users = () => {\n  const history = useHistory()\n  const [depositDatas, setDepositDatas] = useState([])\n  const [page, setPage] = useState(1)\n  const [totalItems, setTotalItems] =  useState(\"\")\n\n  const getBadge = status => {\n    switch (status) {\n      case 'COMPLETED':\n        return 'success'\n      case 'FAILED':\n        return 'secondary'\n      case 'Pending':\n        return 'warning'\n      case 'FAILED':\n        return 'danger'\n      default:\n        return 'primary'\n    }\n  }\n\n\n  useEffect(() => {\n    getUsers()\n  }, [])\n\n  const getUsers = () => {\n    axios\n      .get(\n        `${config.baseUrl}/api/v1/admin/transactions/withdrawal?pageNumber=1&pageSize=10`,\n        {\n          headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('token')}`\n          }\n        }\n      )\n      .then(res => {\n        if (res.status === 200) {\n          setTotalItems(res.data.totalPages * 10)\n\n          setDepositDatas(\n            res.data.records.map(data => ({\n              reference: data.reference,\n              date: data.createdOn ? data.createdOn.slice(0,10) : null,\n              accName:data.accountName,\n              accNum:data.accountNumber,\n              bank: data.bankName,\n             \n              emailAddress: data.traderXUser.emailAddress,\n              amount:  data.currency === \"NGN\" ? \"N\" + Intl.NumberFormat(\"en-US\").format(data.amount) : \"$\"  + Intl.NumberFormat(\"en-US\").format(data.amount),\n              provider: data.provider.replace('_', ' '),\n              transactionStatus: data.transactionStatus,\n              country: data.traderXUser.country.replace('_', ' '),\n\n            }))\n          )\n        }\n      })\n      .catch(err => {\n        if (err) {\n        }\n      })\n  }\n  const getPaged = queryString => {\n    axios.get(`${config.baseUrl}/api/v1/admin/transactions/withdrawal?${queryString}`, {\n      headers: {\n        Authorization: `Bearer ${sessionStorage.getItem('token')}`\n      }\n    })\n    .then(res => {\n      if (res.status === 200) {\n        setTotalItems(res.data.totalPages * 10)\n        setDepositDatas(\n          res.data.records.map(data => ({\n            reference: data.reference,\n            date: data.createdOn ? data.createdOn.slice(0,10) : null,\n            accName:data.accountName,\n            accNum:data.accountNumber,\n            bank: data.bankName,\n            \n            emailAddress: data.traderXUser.emailAddress,\n            amount:  data.currency === \"NGN\" ? \"N\" + Intl.NumberFormat(\"en-US\").format(data.amount) : \"$\"  + Intl.NumberFormat(\"en-US\").format(data.amount),\n            provider: data.provider.replace('_', ' '),\n            transactionStatus: data.transactionStatus,\n            country: data.traderXUser.country.replace('_', ' '),\n          }))\n        )\n      }\n    })\n    .catch(err => {\n      if (err) {\n      }\n    })\n}\n\nconst pagination = (page, pageSize) => {\n  console.log(page)\n  setPage(page)\n  const queryString = `pageNumber=${page}&pageSize=10`\n  getPaged(queryString)\n}\n  return (\n    <CRow>\n      <CCol>\n        <CCard>\n          <CCardHeader>Withdrawal Transactions</CCardHeader>\n          <CCardBody>\n            <CDataTable\n              items={depositDatas}\n              fields={[\n                { key: 'reference', name: 'Transaction ID' },\n                { key: 'date', name: 'Transaction Date' },\n                { key: 'accName', name: 'Account Name' },\n                { key: 'accNum', name: 'Account Number' },\n                { key: 'bank', name: 'Bank' },\n                { key: 'emailAddress', name: 'Email Address' },\n                { key: 'amount', name: 'Amount' },\n                { key: 'provider', name: 'Provider' },\n                { key: 'transactionStatus', name: 'Transaction Status' },\n                { key: 'country', name: 'Country' }\n              ]}\n              \n              scopedSlots={{\n                transactionStatus: item => (\n                  <td>\n                    <CBadge color={getBadge(item.transactionStatus)}>\n                      {item.transactionStatus}\n                    </CBadge>\n                  </td>\n                )\n              }}\n              clickableRows\n            />\n                 <div className='text-center pagination-part'>\n        <Pagination\n          current={page}\n          total={totalItems}\n          defaultPageSize={10}\n          showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}\n          onChange={pagination}\n        />\n      </div>\n        \n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Users\n","export default {\n    baseUrl: process.env.REACT_APP_API_END_POINT\n};\nconsole.log(process.env.REACT_APP_API_END_POINT)"],"sourceRoot":""}