{"version":3,"sources":["views/jobs/jobs.jsx","config.js"],"names":["Users","useHistory","queryPage","useLocation","search","match","currentPage","Number","useState","setLoad","JobDatas","setJobDatas","success","setSuccess","error","setError","msg","setMsg","useEffect","getJobs","axios","get","config","baseUrl","headers","Authorization","sessionStorage","getItem","then","res","data","console","log","map","name","group","nextFireFrame","nextFireTime","previousFireFrame","previousFireTime","startTime","mayFireAgain","triggerState","catch","err","changeStatusConfirmPause","id","e","preventDefault","Modal","confirm","title","icon","okText","okType","cancelText","onOk","pause","onCancel","changeStatusConfirmResume","resume","post","status","undefined","response","message","color","items","fields","key","scopedSlots","Actions","item","className","type","class","onClick","bind","clickableRows","process"],"mappings":"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","file":"static/js/24.40f2cdbc.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { ExclamationCircleOutlined } from '@ant-design/icons'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CAlert,\n  CRow,\n  CButton,\n  CPagination\n} from '@coreui/react'\nimport config from '../../config'\nimport {Modal} from \"antd\"\nimport axios from 'axios'\n\nconst Users = () => {\n  const history = useHistory()\n  const queryPage = useLocation().search.match(/page=([0-9]+)/, '')\n  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1)\n  const [page, setPage] = useState(currentPage)\n  const [load, setLoad] =useState(false)\n  const [JobDatas, setJobDatas] = useState([])\n  const [success, setSuccess] = useState(false)\n  const [error, setError] = useState(false)\n  const [msg,setMsg] = useState(\"\")\n\n\n  const getBadge = status => {\n    switch (status) {\n      case 'COMPLETED':\n        return 'success'\n      case 'FAILED':\n        return 'secondary'\n      case 'Pending':\n        return 'warning'\n      case 'FAILED':\n        return 'danger'\n      default:\n        return 'primary'\n    }\n  }\n\n  \n\n  useEffect(() => {\n    getJobs()\n  }, [])\n\n  const getJobs = () => {\n    axios\n      .get(\n        `${config.baseUrl}/api/v1/admin/jobs`,\n        {\n          headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('token')}`\n          }\n        }\n      )\n      .then(res => {\n        if (res.data) {\n          console.log(JobDatas)\n          setJobDatas(\n            res.data.map(data => ({\n              name: data.name,\n              group: data.group,\n              nextFireFrame: data.nextFireTime,\n              previousFireFrame: data.previousFireTime,\n              startTime: data.startTime,\n              mayFireAgain: data.mayFireAgain ? \"YES\": \"NO\",\n              triggerState: data.triggerState,\n              \n            }))\n          )\n\n        }\n      })\n      .catch(err => {\n        if (err) {\n        }\n      })\n  }\n\n  const changeStatusConfirmPause = (id, e) => {\n    e.preventDefault()\n    Modal.confirm({\n      title: `Are you sure you want to pause this job ?`,\n      icon: <ExclamationCircleOutlined />,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk () {\n        pause(id)\n      },\n      onCancel () {\n        console.log('Cancel')\n      }\n    })\n  }\n\n  const changeStatusConfirmResume = (id, e) => {\n    e.preventDefault()\n    Modal.confirm({\n      title: `Are you sure you want to resume this job ?`,\n      icon: <ExclamationCircleOutlined />,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk () {\n        resume(id)\n      },\n      onCancel () {\n        console.log('Cancel')\n      }\n    })\n  }\n\n  const pause = (id, e) => {\n    console.log(id)\n    setLoad(true)\n    axios\n      .post(`${config.baseUrl}/api/v1/admin/jobs/${id.group}/pause?keyName=${id.name}`, {\n        headers: {\n          Authorization: `Bearer ${sessionStorage.getItem('token')}`\n        }\n      })\n      .then(res => {\n        setLoad(false)\n        if (res.status === 200) {\n          setSuccess(true)\n          setMsg(\"Job Paused Successfully\")\n          setError(false)\n          getJobs()\n        }\n      })\n      .catch(err => {\n        setLoad(false)\n        if (err.response !== undefined) {\n          setMsg(err.response.data.message)\n          setError(true)\n          setSuccess(false)\n        } else {\n          setMsg('Connection Error')\n          setError(true)\n          setSuccess(false)\n        }\n      })\n  }\n\n  const resume = (id, e) => {\n    console.log(id)\n    setLoad(true)\n    axios\n      .post(`${config.baseUrl}/api/v1/admin/jobs/${id.group}/resume?keyName=${id.name}`, {\n        headers: {\n          Authorization: `Bearer ${sessionStorage.getItem('token')}`\n        }\n      })\n      .then(res => {\n        setLoad(false)\n        if (res.status === 200) {\n          setSuccess(true)\n          setMsg(\"JOb Resumed Successfully\")\n          setError(false)\n          getJobs()\n        }\n      })\n      .catch(err => {\n        setLoad(false)\n        if (err.response !== undefined) {\n          setMsg(err.response.data.message)\n          setError(true)\n          setSuccess(false)\n        } else {\n          setMsg('Connection Error')\n          setError(true)\n          setSuccess(false)\n        }\n      })\n  }\n\n\n\n  return (\n    <CRow>\n      <CCol>\n        {success &&\n      <CAlert color=\"success\">\n                {msg}\n              </CAlert>}\n              {error &&\n      <CAlert color=\"danger\">\n                {msg}\n              </CAlert>}\n        <CCard>\n          <CCardHeader>Jobs</CCardHeader>\n          <CCardBody>\n            <CDataTable\n              items={JobDatas}\n              fields={[\n                { key: 'name', name: 'Name' },\n                { key: 'group', name: 'Group' },\n                { key: 'nextFireFrame', name: 'Next Fire Time' },\n                { key: 'previousFireFrame', name: 'Previous Fire Time ' },\n                { key: 'startTime', name: 'Start Time'},\n                { key: 'mayFireAgain', name: 'May Fire Again' },\n                { key: 'triggerState', name: 'Trigger State' },\n                {\n                  key: 'Actions',\n                  name: 'Actions',\n                 \n                }\n              ]}\n              \n              scopedSlots={{\n                Actions: item => (\n                  <td className='d-flex justify-content-between align-items-center'>\n                    <button type=\"button\" class=\"btn btn-danger\" onClick={changeStatusConfirmPause.bind(this, item)}>Pause</button>\n                    <button type=\"button\" class=\"btn btn-success\" onClick={changeStatusConfirmResume.bind(this, item)}>Resume</button>\n\n                  \n                  </td>\n                )\n              }}\n           \n              clickableRows\n            />\n           \n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Users\n","export default {\n    baseUrl: process.env.REACT_APP_API_END_POINT\n};\nconsole.log(process.env.REACT_APP_API_END_POINT)"],"sourceRoot":""}