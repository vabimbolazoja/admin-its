{"version":3,"sources":["views/transactions/deposits.jsx","config.js"],"names":["Users","useHistory","useState","page","setPage","depositDatas","setDepositDatas","totalItems","setTotalItems","getBadge","status","useEffect","getDeposits","axios","get","config","baseUrl","headers","Authorization","sessionStorage","getItem","then","res","data","totalPages","records","map","transactionId","date","createdOn","slice","firstName","traderXUser","lastName","emailAddress","amount","currency","Intl","NumberFormat","format","provider","replace","transactionStatus","platformFeePaid","country","catch","err","items","fields","key","name","scopedSlots","item","color","className","current","total","showTotal","range","defaultPageSize","onChange","pageSize","console","log","queryString","getPaged","process"],"mappings":"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","file":"static/js/26.fb68b51d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n} from '@coreui/react'\nimport config from '../../config'\nimport { Pagination } from 'antd'\nimport axios from 'axios'\n\nconst Users = () => {\n  const history = useHistory()\n \n  const [page, setPage] = useState(1)\n  const [depositDatas, setDepositDatas] = useState([])\n  const [totalItems, setTotalItems] =  useState(\"\")\n\n\n  const getBadge = status => {\n    switch (status) {\n      case 'COMPLETED': return 'success'\n      case 'FAILED': return 'secondary'\n      case 'Pending': return 'warning'\n      case 'FAILED': return 'danger'\n      default: return 'primary'\n    }\n  }\n\n\n  const getPaged = queryString => {\n    axios.get(`${config.baseUrl}/api/v1/admin/transactions/fund-wallet?${queryString}`, {\n      headers: {\n        Authorization: `Bearer ${sessionStorage.getItem('token')}`\n      }\n    })\n    .then(res => {\n      if (res.status === 200) {\n        setTotalItems(res.data.totalPages * 10)\n        setDepositDatas(\n          res.data.records.map(data => ({\n              transactionId: data.transactionId,\n              date: data.createdOn ? data.createdOn.slice(0,10) : \"\",\n            firstName: data.traderXUser.firstName,\n            lastName: data.traderXUser.lastName,\n            emailAddress: data.traderXUser.emailAddress,\n            amount:  data.currency === \"NGN\" ? \"N\" + Intl.NumberFormat(\"en-US\").format(data.amount) : \"$\"  + Intl.NumberFormat(\"en-US\").format(data.amount),\n            provider: data.provider.replace('_', ' '),\n            transactionStatus: data.transactionStatus,\n            platformFeePaid: data.traderXUser.platformFeePaid ? \"YES\" : \"NO\",\n            country: data.traderXUser.country.replace(\"_\", \" \")\n\n          }))\n        )\n      }\n    })\n    .catch(err => {\n      if (err) {\n      }\n    })\n}\n\n\nconst pagination = (page, pageSize) => {\n  console.log(page)\n  setPage(page)\n  const queryString = `pageNumber=${page}&pageSize=10`\n  getPaged(queryString)\n}\n\n  \n \n\n  useEffect(() => {\n    getDeposits()\n  }, [])\n\n  const getDeposits = () => {\n    axios\n      .get(\n        `${config.baseUrl}/api/v1/admin/transactions/fund-wallet?pageNumber=1&pageSize=10`,\n        {\n          headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('token')}`\n          }\n        }\n      )\n      .then(res => {\n        if (res.status === 200) {\n          setTotalItems(res.data.totalPages * 10)\n          setDepositDatas(\n            res.data.records.map(data => ({\n                transactionId: data.transactionId,\n                date: data.createdOn ? data.createdOn.slice(0,10) : \"\",\n              firstName: data.traderXUser.firstName,\n              lastName: data.traderXUser.lastName,\n              emailAddress: data.traderXUser.emailAddress,\n              amount:  data.currency === \"NGN\" ? \"N\" + Intl.NumberFormat(\"en-US\").format(data.amount) : \"$\"  + Intl.NumberFormat(\"en-US\").format(data.amount),\n              provider: data.provider.replace('_', ' '),\n              transactionStatus: data.transactionStatus,\n              platformFeePaid: data.traderXUser.platformFeePaid ? \"YES\" : \"NO\",\n              country: data.traderXUser.country.replace(\"_\", \" \")\n\n            }))\n          )\n        }\n      })\n      .catch(err => {\n        if (err) {\n        }\n      })\n  }\n\n  return (\n    <CRow>\n      <CCol>\n        <CCard>\n          <CCardHeader>Deposit Transactions</CCardHeader>\n          <CCardBody>\n            <CDataTable\n              items={depositDatas}\n              fields={[\n                { key: 'transactionId', name: 'Transaction ID' },\n                { key: 'date', name: 'Transaction Date' },\n                { key: 'firstName', name: 'First Name' },\n                { key: 'lastName', name: 'Last Name' },\n                { key: 'emailAddress', name: 'Email Address' },\n                { key: 'amount', name: 'Amount' },\n                { key: 'provider', name: 'Provider' },\n                { key: 'transactionStatus', name: 'Transaction Status' },\n                { key: 'platformFeePaid', name: 'Platform Fee Paid' },\n                { key: 'country', name: 'Country' }\n\n                \n              ]}\n           \n              scopedSlots = {{\n                'transactionStatus':\n                  (item)=>(\n                    <td>\n                      <CBadge color={getBadge(item.transactionStatus)}>\n                        {item.transactionStatus}\n                      </CBadge>\n                    </td>\n                  )\n\n              }}\n            />\n               <div className='text-center pagination-part'>\n        <Pagination\n          current={page}\n          total={totalItems}\n          showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}\n          defaultPageSize={10}\n          onChange={pagination}\n        />\n      </div>\n            \n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Users\n","export default {\n    baseUrl: process.env.REACT_APP_API_END_POINT\n};\nconsole.log(process.env.REACT_APP_API_END_POINT)"],"sourceRoot":""}