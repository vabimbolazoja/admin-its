{"version":3,"sources":["views/bids/bids.jsx","config.js"],"names":["getBadge","status","Users","useState","bidsData","setBidsData","page","setPage","totalItems","setTotalItems","setBidStatusData","useEffect","getBids","axios","get","config","baseUrl","headers","Authorization","sessionStorage","getItem","then","res","data","catch","err","totalPages","records","map","askReference","reference","username","bidAmount","bidCurrency","Intl","NumberFormat","format","bidStatus","paymentStatus","items","fields","key","name","scopedSlots","item","color","className","current","total","showTotal","range","defaultPageSize","onChange","pageSize","console","log","queryString","getPaged","process"],"mappings":"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","file":"static/js/21.271dd0a4.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CPagination\n} from '@coreui/react'\nimport config from '../../config'\nimport { Pagination } from 'antd'\nimport axios from 'axios'\n\nconst getBadge = status => {\n  switch (status) {\n    case 'COMPLETED': return 'success'\n    case 'ACCEPETED': return 'success'\n    case 'PENDING': return 'warning'\n    case 'FAILED': return 'danger'\n    case 'REJECTED': return 'secondary'\n    case 'CANCELLED\t': return 'danger'\n\n    default: return 'primary'\n  }\n}\n\nconst Users = () => {\n \n  const [bidsData, setBidsData] = useState([])\n  const [page, setPage] = useState(1)\n  const [totalItems, setTotalItems] =  useState(\"\")\n    const [bidStatusData, setBidStatusData] = useState ({});\n\n\n\n    const getBidStatus = () => {\n    axios\n        .get(`${config.baseUrl}/api/v1/bid/statuses`, {\n        headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('token')}`\n        }\n    })\n    .then(res => {\n        if (res.data) {\n            setBidStatusData(res.data)\n        }\n    })\n    .catch(err => {\n        if (err) {}\n    })\n  }\n\n  useEffect(() => {\n    getBids()\n    getBidStatus()\n  }, [])\n\n\n  const getPaged = queryString => {\n    axios.get(`${config.baseUrl}/api/v1/admin/bids/all?${queryString}`, {\n      headers: {\n        Authorization: `Bearer ${sessionStorage.getItem('token')}`\n      }\n    })\n    .then(res => {\n      if (res.status === 200) {\n        setTotalItems(res.data.totalPages * 10)\n        setBidsData(\n          res.data.records.map(data => ({\n            askReference: data.askReference,\n            reference: data.reference,\n            username: data.username,\n            bidAmount:data.bidCurrency === 'NGN'\n            ? 'N'  + Intl.NumberFormat('en-US').format(data.bidAmount)\n            : '$' + Intl.NumberFormat('en-US').format(data.bidAmount),\n              \n            bidStatus: data.bidStatus,\n            paymentStatus: data.paymentStatus\n          }))\n        )\n      }\n    })\n    .catch(err => {\n      if (err) {\n      }\n    })\n}\n\n\n  const getBids = () => {\n    axios\n      .get(\n        `${config.baseUrl}/api/v1/admin/bids/all?pageNumber=1&pageSize=10&haveCurrency&haveAmount&needCurrency&needAmount&rate&askStatus&emailAddress&phoneNumber&startDate&endDate`,\n        {\n          headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('token')}`\n          }\n        }\n      )\n      .then(res => {\n        if (res.status === 200) {\n          setTotalItems(res.data.totalPages * 10)\n          setBidsData(\n            res.data.records.map(data => ({\n              askReference: data.askReference,\n              reference: data.reference,\n              username: data.username,\n              bidAmount:data.bidCurrency === 'NGN'\n              ? 'N'  + Intl.NumberFormat('en-US').format(data.bidAmount)\n              : '$' + Intl.NumberFormat('en-US').format(data.bidAmount),\n                \n              bidStatus: data.bidStatus,\n              paymentStatus: data.paymentStatus\n            }))\n          )\n        }\n      })\n      .catch(err => {\n        if (err) {\n        }\n      })\n  }\n\n\n  const pagination = (page, pageSize) => {\n    console.log(page)\n    setPage(page)\n    const queryString = `pageNumber=${page}&pageSize=10&haveCurrency&haveAmount&needCurrency&needAmount&rate&askStatus&emailAddress&phoneNumber&startDate&endDate`\n    getPaged(queryString)\n  }\n\n  return (\n    <CRow>\n      <CCol>\n        <CCard>\n          <CCardHeader>Bids</CCardHeader>\n          <CCardBody>\n            <CDataTable\n              items={bidsData}\n              fields={[\n                { key: 'askReference', name: 'Ask Ref' },\n                { key: 'reference', name: 'Bid Ref' },\n                { key: 'username', name: 'Username' },\n                { key: 'bidAmount', name: 'Bid Amount' },\n                { key: 'bidStatus', name: 'Bid Status' },\n                { key: 'paymentStatus', name: 'Payment Status' }\n              ]}\n\n              scopedSlots = {{\n                'bidStatus':\n                  (item)=>(\n                    <td>\n                      <CBadge color={getBadge(item.bidStatus)}>\n                        {item.bidStatus}\n                      </CBadge>\n                    </td>\n                  )\n  \n              },\n              {\n                'paymentStatus':\n                  (item)=>(\n                    <td>\n                      <CBadge color={getBadge(item.paymentStatus)}>\n                        {item.paymentStatus}\n                      </CBadge>\n                    </td>\n                  )\n  \n              }\n\n            \n            }\n             \n            />\n           <div className='text-center pagination-part'>\n        <Pagination\n          current={page}\n          total={totalItems}\n          showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}\n          defaultPageSize={10}\n          onChange={pagination}\n        />\n      </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Users\n","export default {\n    baseUrl: process.env.REACT_APP_API_END_POINT\n};\nconsole.log(process.env.REACT_APP_API_END_POINT)"],"sourceRoot":""}