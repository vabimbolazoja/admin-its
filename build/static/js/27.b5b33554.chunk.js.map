{"version":3,"sources":["views/transactions/exhange.jsx","config.js"],"names":["getBadge","status","Users","useHistory","useState","exchangeData","setExchangeData","viewAskModal","setViewAskModal","viewBidModal","setViewBidModal","page","setPage","totalItems","setTotalItems","askInfo","setAskInfo","bidInfo","setBidInfo","useEffect","getExchange","axios","get","config","baseUrl","headers","Authorization","sessionStorage","getItem","then","res","data","totalPages","records","map","transactionStatus","reference","exchangeStatus","createdOn","slice","ask","bid","catch","err","viewAskFunc","id","e","viewBidFunc","items","fields","key","name","scopedSlots","Actions","item","className","type","class","onClick","bind","color","current","total","showTotal","range","defaultPageSize","onChange","pageSize","console","log","queryString","getPaged","title","visible","footer","maskClosable","onCancel","width","xs","md","action","method","encType","row","htmlFor","haveCurrency","haveAmount","Intl","NumberFormat","format","needCurrency","needAmount","rate","fraction","askStatus","bidCurrency","bidAmount","bidStatus","paymentStatus","process"],"mappings":"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","file":"static/js/27.b5b33554.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { ExclamationCircleOutlined } from '@ant-design/icons'\nimport { Modal, notification, Pagination } from 'antd'\n\nimport {\n  CForm,\n  CFormText,\n  CCardFooter,\n  CInputFile,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CBadge,\n  CFormGroup,\n  CLabel,\n  CRow,\n  CInput,\n  CTextarea,\n  CButton,\n  CPagination\n} from '@coreui/react'\nimport config from '../../config'\nimport axios from 'axios'\n\nconst getBadge = status => {\n  switch (status) {\n    case 'COMPLETED':\n      return 'success'\n    case 'FAILED':\n      return 'secondary'\n    case 'Pending':\n      return 'warning'\n    case 'FAILED':\n      return 'danger'\n    default:\n      return 'primary'\n  }\n}\n\nconst Users = () => {\n  const history = useHistory()\n  const [exchangeData, setExchangeData] = useState([])\n  const [success, setSuccess] = useState(false)\n  const [error, setError] = useState(false)\n  const [viewAskModal, setViewAskModal] = useState(false)\n  const [viewBidModal, setViewBidModal] = useState(false)\n\n  const [page, setPage] = useState(1)\n  const [totalItems, setTotalItems] =  useState(\"\")\n\n  const [askInfo, setAskInfo] = useState({})\n  const [bidInfo, setBidInfo] = useState({})\n  const [load, setLoad] = useState(false)\n  const [reason, setReason] = useState('')\n  const [userId, setUserId] = useState('')\n  const [loadView, setLoadView] = useState(false)\n\n\n\n\n  const closeViewAsk = () => {\n    setViewAskModal(false)\n  }\n\n  const closeViewBid = () => {\n    setViewBidModal(false)\n  }\n\n  const getPaged = queryString => {\n    axios.get(`${config.baseUrl}/api/v1/admin/transactions/exchange?${queryString}`, {\n      headers: {\n        Authorization: `Bearer ${sessionStorage.getItem('token')}`\n      }\n    })\n    .then(res => {\n      if (res.status === 200) {\n        setTotalItems(res.data.totalPages * 10)\n        setExchangeData(\n          res.data.records.map(data => ({\n            transactionStatus: data.transactionStatus,\n            reference: data.reference,\n            exchangeStatus: data.exchangeStatus,\n            createdOn: data.createdOn ? data.createdOn.slice(0,10) : \"\",\n            ask: data.ask,\n            bid:data.bid\n          }))\n        )\n      }\n    })\n    .catch(err => {\n      if (err) {\n      }\n    })\n}\n\nconst pagination = (page, pageSize) => {\n  console.log(page)\n  setPage(page)\n  const queryString = `pageNumber=${page}&pageSize=10&startDate&endDate&exhangeStatus&transactionStatus&reference`\n  getPaged(queryString)\n}\n\n  useEffect(() => {\n    getExchange()\n  }, [])\n\n  const getExchange = () => {\n    axios\n      .get(\n        `${config.baseUrl}/api/v1/admin/transactions/exchange?pageNumber=1&pageSize=10&startDate&endDate&exhangeStatus&transactionStatus&reference`,\n        {\n          headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('token')}`\n          }\n        }\n      )\n      .then(res => {\n        if (res.status === 200) {\n          setTotalItems(res.data.totalPages * 10)\n          setExchangeData(\n            res.data.records.map(data => ({\n              transactionStatus: data.transactionStatus,\n              reference: data.reference,\n              exchangeStatus: data.exchangeStatus,\n              createdOn: data.createdOn ? data.createdOn.slice(0,10) : \"\",\n              ask: data.ask,\n              bid:data.bid\n            }))\n          )\n        }\n      })\n      .catch(err => {\n        if (err) {\n        }\n      })\n  }\n\n  const viewAskFunc = (id, e) => {\n    setAskInfo(id.ask)\n    setViewAskModal(true)\n    \n  }\n\n  const viewBidFunc = (id, e) => {\n    setBidInfo(id.bid)\n    setViewBidModal(true)\n    \n  }\n\n  const Notification = (type, msgType, msg) => {\n    notification[type]({\n      message: msgType,\n      description: msg\n    })\n  }\n\n  return (\n    <CRow>\n      <CCol>\n        <CCard>\n          <CCardHeader>Exchnage</CCardHeader>\n          <CCardBody>\n            <CDataTable\n              items={exchangeData}\n              fields={[\n                {\n                  key: 'reference',\n                  name: 'Reference',\n                 \n                },\n                {\n                  key: 'createdOn',\n                  name: 'Created On',\n                 \n                },\n                \n                {\n                  key: 'exchangeStatus',\n                  name: 'Exchange Status',\n                 \n                },\n                {\n                  key: 'transactionStatus',\n                  name: 'Transaction Status',\n                 \n                },\n               \n                \n                {\n                  key: 'Actions',\n                  name: 'Actions',\n                 \n                }\n              ]}\n            \n           \n              scopedSlots={{\n                Actions: item => (\n                  <td className='d-flex'>\n                      <button\n                      type='button'\n                      class='btn btn-info mr-2'\n                      onClick={viewAskFunc.bind(this, item)}\n                    >\n                      View Ask\n                    </button>\n                    <button\n                      type='button'\n                      class='btn btn-primary'\n                      onClick={viewBidFunc.bind(this, item)}\n                    >\n                      View Bid\n                    </button>\n                   \n                   \n                  </td>\n                ),\n                transactionStatus: item => (\n                  <td>\n                    <CBadge color={getBadge(item.transactionStatus)}>\n                      {item.transactionStatus}\n                    </CBadge>\n                  </td>\n                ),\n                exchangeStatus: item => (\n                  <td>\n                    <CBadge color={getBadge(item.exchangeStatus)}>\n                      {item.exchangeStatus}\n                    </CBadge>\n                  </td>\n                )\n              }}\n            />\n                <div className='text-center pagination-part'>\n        <Pagination\n          current={page}\n          total={totalItems}\n          showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}\n          defaultPageSize={10}\n          onChange={pagination}\n        />\n      </div>\n            \n          </CCardBody>\n        </CCard>\n      </CCol>\n\n      \n\n      <Modal\n        title={'View Ask'}\n        visible={viewAskModal}\n        footer={null}\n        maskClosable={false}\n        onCancel={closeViewAsk}\n        width={500}\n      >\n        <div className='container'>\n          <CRow>\n            <CCol xs='12' md='12'>\n              <CCard>\n                <CCardHeader>Ask Exchange Information</CCardHeader>\n                <CCardBody>\n                  <CForm\n                    action=''\n                    method='post'\n                    encType='multipart/form-data'\n                    className='form-horizontal'\n                  >\n                    <CFormGroup row>\n                      <CCol md='5'>\n                        <CLabel>Reference</CLabel>\n                      </CCol>\n                      <CCol xs='12' md='7'>\n                        <p className='form-control-static'>\n                          {askInfo.reference ? askInfo.reference : ''}\n                        </p>\n                      </CCol>\n                    </CFormGroup>\n                    <CFormGroup row>\n                      <CCol md='5'>\n                        <CLabel htmlFor='text-input'>Have Amount</CLabel>\n                      </CCol>\n                      <CCol xs='12' md='7'>\n                        <p className='form-control-static'>\n                        {askInfo.haveCurrency ? askInfo.haveCurrency === \"NGN\" ? \"N\" : \"$\" : \"\"}\n                        {askInfo.haveAmount ?  Intl.NumberFormat(\"en-US\").format(askInfo.haveAmount) : \"\"}\n                        </p>\n                      </CCol>\n                    </CFormGroup>\n                    <CFormGroup row>\n                      <CCol md='5'>\n                        <CLabel htmlFor='email-input'>Need Amount</CLabel>\n                      </CCol>\n                      <CCol xs='12' md='7'>\n                        <p className='form-control-static'>\n                        {askInfo.needCurrency ? askInfo.needCurrency === \"NGN\" ? \"N\" : \"$\" : \"\"}\n                        {askInfo.needAmount ?  Intl.NumberFormat(\"en-US\").format(askInfo.needAmount) : \"\"}                      \n                          </p>\n                      </CCol>\n                    </CFormGroup>\n                    <CFormGroup row>\n                      <CCol md='5'>\n                        <CLabel htmlFor='password-input'>Rate</CLabel>\n                      </CCol>\n                      <CCol xs='12' md='7'>\n                        <p className='form-control-static'>\n                          {askInfo.rate ? askInfo.rate : ''}\n                        </p>\n                      </CCol>\n                    </CFormGroup>\n                    <CFormGroup row>\n                      <CCol md='5'>\n                        <CLabel htmlFor='date-input'>Fraction </CLabel>\n                      </CCol>\n                      <CCol xs='12' md='7'>\n                        <p className='form-control-static'>\n                          {askInfo.fraction ? \"YES\" : 'No'}\n                        </p>\n                      </CCol>\n                    </CFormGroup>\n                    <CFormGroup row>\n                      <CCol md='5'>\n                        <CLabel htmlFor='date-input'>Payment Status </CLabel>\n                      </CCol>\n                      <CCol xs='12' md='7'>\n                        <p className='form-control-static'>\n            \n                          {askInfo.askStatus ? <CBadge color={getBadge(askInfo.askStatus)}>\n                      {askInfo.askStatus}\n                    </CBadge>  : \"\"}\n\n                        </p>\n                      </CCol>\n                    </CFormGroup>\n                  \n                  \n                  </CForm>\n                </CCardBody>\n             \n              </CCard>\n            </CCol>\n          </CRow>\n        </div>\n      </Modal>\n\n      <Modal\n        title={'View Bid'}\n        visible={viewBidModal}\n        footer={null}\n        maskClosable={false}\n        onCancel={closeViewBid}\n        width={500}\n      >\n          <div className='container'>\n          <CRow>\n            <CCol xs='12' md='12'>\n              <CCard>\n                <CCardHeader>BId Exchange Information</CCardHeader>\n                <CCardBody>\n                  <CForm\n                    action=''\n                    method='post'\n                    encType='multipart/form-data'\n                    className='form-horizontal'\n                  >\n                    <CFormGroup row>\n                      <CCol md='5'>\n                        <CLabel>Reference</CLabel>\n                      </CCol>\n                      <CCol xs='12' md='7'>\n                        <p className='form-control-static'>\n                          {bidInfo.reference ? bidInfo.reference : ''}\n                        </p>\n                      </CCol>\n                    </CFormGroup>\n                    <CFormGroup row>\n                      <CCol md='5'>\n                        <CLabel htmlFor='text-input'>Bid Amount</CLabel>\n                      </CCol>\n                      <CCol xs='12' md='7'>\n                        <p className='form-control-static'>\n                        {bidInfo.bidCurrency ? bidInfo.bidCurrency === \"NGN\" ? \"N\" : \"$\" : \"\"}\n                        {bidInfo.bidAmount ?  Intl.NumberFormat(\"en-US\").format(bidInfo.bidAmount) : \"\"}\n                        </p>\n                      </CCol>\n                    </CFormGroup>\n                    <CFormGroup row>\n                      <CCol md='5'>\n                        <CLabel htmlFor='email-input'>Bid Status</CLabel>\n                      </CCol>\n                      <CCol xs='12' md='7'>\n                          <p className='form-control-static'>\n                          {bidInfo.bidStatus ? <CBadge color={getBadge(bidInfo.bidStatus)}>\n                      {bidInfo.bidStatus}\n                    </CBadge>  : \"\"}\n\n                        </p>\n                      </CCol>\n                    </CFormGroup>\n                    <CFormGroup row>\n                      <CCol md='5'>\n                        <CLabel htmlFor='password-input'>Rate</CLabel>\n                      </CCol>\n                      <CCol xs='12' md='7'>\n                        <p className='form-control-static'>\n                          {bidInfo.rate ? bidInfo.rate : ''}\n                        </p>\n                      </CCol>\n                    </CFormGroup>\n                \n                    <CFormGroup row>\n                      <CCol md='5'>\n                        <CLabel htmlFor='date-input'>Payment Status </CLabel>\n                      </CCol>\n                      <CCol xs='12' md='7'>\n                        <p className='form-control-static'>\n                          {bidInfo.paymentStatus ? <CBadge color={getBadge(bidInfo.paymentStatus)}>\n                      {bidInfo.paymentStatus}\n                    </CBadge>  : \"\"}\n\n                        </p>\n                      </CCol>\n                    </CFormGroup>\n                  \n                  \n                  </CForm>\n                </CCardBody>\n             \n              </CCard>\n            </CCol>\n          </CRow>\n        </div>\n      </Modal>\n    </CRow>\n  )\n}\n\nexport default Users\n","export default {\n    baseUrl: process.env.REACT_APP_API_END_POINT\n};\nconsole.log(process.env.REACT_APP_API_END_POINT)"],"sourceRoot":""}