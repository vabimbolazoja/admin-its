{"version":3,"sources":["views/transactions/settlments.jsx","config.js"],"names":["Users","useHistory","useState","settlementsData","setSettlementsData","page","setPage","totalItems","setTotalItems","getBadge","status","getPaged","queryString","axios","get","config","baseUrl","headers","Authorization","sessionStorage","getItem","then","res","data","totalPages","records","map","transactionReference","feeAmount","currency","Intl","NumberFormat","format","provider","replace","transactionStatus","catch","err","useEffect","getSettlemts","items","fields","key","name","scopedSlots","item","color","className","current","total","defaultPageSize","showTotal","range","onChange","pageSize","console","log","process"],"mappings":"uQAmJeA,UAnID,WACIC,cAAhB,IAEA,EAA8CC,mBAAS,IAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAwBF,mBAAS,GAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAqCJ,mBAAS,IAA9C,mBAAOK,EAAP,KAAmBC,EAAnB,KAEMC,EAAW,SAAAC,GACf,OAAQA,GACN,IAAK,YACH,MAAO,UACT,IAAK,SACH,MAAO,YACT,IAAK,UACH,MAAO,UACT,IAAK,SACH,MAAO,SACT,QACE,MAAO,YAYPC,EAAW,SAAAC,GACfC,IAAMC,IAAN,UAAaC,IAAOC,QAApB,iDAAoEJ,GAAe,CACjFK,QAAS,CACPC,cAAc,UAAD,OAAYC,eAAeC,QAAQ,aAGnDC,MAAK,SAAAC,GACe,MAAfA,EAAIZ,SACNF,EAAoC,GAAtBc,EAAIC,KAAKC,YACvBpB,EACEkB,EAAIC,KAAKE,QAAQC,KAAI,SAAAH,GAAI,MAAK,CAC5BI,qBAAsBJ,EAAKI,qBAC3BC,UAA8B,QAAlBL,EAAKM,SAAqB,IAAMC,KAAKC,aAAa,SAASC,OAAOT,EAAKK,WAAa,IAAOE,KAAKC,aAAa,SAASC,OAAOT,EAAKK,WAC9IK,SAAUV,EAAKU,SAASC,QAAQ,IAAK,KACrCC,kBAAmBZ,EAAKY,2BAK/BC,OAAM,SAAAC,QAMTC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAe,WACnB1B,IACGC,IADH,UAEOC,IAAOC,QAFd,kEAGI,CACEC,QAAS,CACPC,cAAc,UAAD,OAAYC,eAAeC,QAAQ,aAIrDC,MAAK,SAAAC,GACe,MAAfA,EAAIZ,SACNF,EAAoC,GAAtBc,EAAIC,KAAKC,YACvBpB,EACEkB,EAAIC,KAAKE,QAAQC,KAAI,SAAAH,GAAI,MAAK,CAC5BI,qBAAsBJ,EAAKI,qBAC7BC,UAA8B,QAAlBL,EAAKM,SAAqB,IAAMC,KAAKC,aAAa,SAASC,OAAOT,EAAKK,WAAa,IAAOE,KAAKC,aAAa,SAASC,OAAOT,EAAKK,WAC5IK,SAAUV,EAAKU,SAASC,QAAQ,IAAK,KACrCC,kBAAmBZ,EAAKY,2BAK/BC,OAAM,SAAAC,QAMX,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,uCACA,eAAC,IAAD,WACE,cAAC,IAAD,CACEG,MAAOrC,EACPsC,OAAQ,CACN,CAAEC,IAAK,uBAAwBC,KAAM,mBACrC,CAAED,IAAK,YAAaC,KAAM,cAC1B,CAAED,IAAK,WAAYC,KAAM,YACzB,CAAED,IAAK,oBAAqBC,KAAM,uBAGpCC,YAAa,CACXT,kBAAmB,SAAAU,GAAI,OACrB,6BACE,cAAC,IAAD,CAAQC,MAAOrC,EAASoC,EAAKV,mBAA7B,SACGU,EAAKV,0BAOf,qBAAKY,UAAU,8BAAf,SACL,cAAC,IAAD,CACEC,QAAS3C,EACT4C,MAAO1C,EACP2C,gBAAiB,GACjBC,UAAW,SAACF,EAAOG,GAAR,gBAAqBA,EAAM,GAA3B,YAAiCA,EAAM,GAAvC,eAAgDH,EAAhD,WACXI,SAlGW,SAAChD,EAAMiD,GACxBC,QAAQC,IAAInD,GACZC,EAAQD,GACR,IAAMO,EAAW,qBAAiBP,EAAjB,gBACjBM,EAASC,oB,iCC1CE,KACXI,QAASyC,6BAEbF,QAAQC,IAAIC","file":"static/js/28.515ab02e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CPagination\n} from '@coreui/react'\nimport config from '../../config'\nimport axios from 'axios'\nimport { Pagination } from 'antd'\n\nconst Users = () => {\n  const history = useHistory()\n  \n  const [settlementsData, setSettlementsData] = useState([])\n  const [page, setPage] = useState(1)\n  const [totalItems, setTotalItems] =  useState(\"\")\n\n  const getBadge = status => {\n    switch (status) {\n      case 'COMPLETED':\n        return 'success'\n      case 'FAILED':\n        return 'secondary'\n      case 'Pending':\n        return 'warning'\n      case 'FAILED':\n        return 'danger'\n      default:\n        return 'primary'\n    }\n  }\n\n  const pagination = (page, pageSize) => {\n    console.log(page)\n    setPage(page)\n    const queryString = `pageNumber=${page}&pageSize=10`\n    getPaged(queryString)\n  }\n\n\n  const getPaged = queryString => {\n    axios.get(`${config.baseUrl}/api/v1/admin/transactions/settlement?${queryString}`, {\n      headers: {\n        Authorization: `Bearer ${sessionStorage.getItem('token')}`\n      }\n    })\n    .then(res => {\n      if (res.status === 200) {\n        setTotalItems(res.data.totalPages * 10)\n        setSettlementsData(\n          res.data.records.map(data => ({\n            transactionReference: data.transactionReference,\n            feeAmount:  data.currency === \"NGN\" ? \"N\" + Intl.NumberFormat(\"en-US\").format(data.feeAmount) : \"$\"  + Intl.NumberFormat(\"en-US\").format(data.feeAmount),\n            provider: data.provider.replace('_', ' '),\n            transactionStatus: data.transactionStatus\n          }))\n        )\n      }\n    })\n    .catch(err => {\n      if (err) {\n      }\n    })\n}\n\n  useEffect(() => {\n    getSettlemts()\n  }, [])\n\n  const getSettlemts = () => {\n    axios\n      .get(\n        `${config.baseUrl}/api/v1/admin/transactions/settlement?pageNumber=1&pageSize=10`,\n        {\n          headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('token')}`\n          }\n        }\n      )\n      .then(res => {\n        if (res.status === 200) {\n          setTotalItems(res.data.totalPages * 10)\n          setSettlementsData(\n            res.data.records.map(data => ({\n              transactionReference: data.transactionReference,\n            feeAmount:  data.currency === \"NGN\" ? \"N\" + Intl.NumberFormat(\"en-US\").format(data.feeAmount) : \"$\"  + Intl.NumberFormat(\"en-US\").format(data.feeAmount),\n              provider: data.provider.replace('_', ' '),\n              transactionStatus: data.transactionStatus\n            }))\n          )\n        }\n      })\n      .catch(err => {\n        if (err) {\n        }\n      })\n  }\n\n  return (\n    <CRow>\n      <CCol>\n        <CCard>\n          <CCardHeader>Settlements Transactions</CCardHeader>\n          <CCardBody>\n            <CDataTable\n              items={settlementsData}\n              fields={[\n                { key: 'transactionReference', name: 'Transaction Ref' },\n                { key: 'feeAmount', name: 'Fee Amount' },\n                { key: 'provider', name: 'Provider' },\n                { key: 'transactionStatus', name: 'Transaction Status' }\n              ]}\n             \n              scopedSlots={{\n                transactionStatus: item => (\n                  <td>\n                    <CBadge color={getBadge(item.transactionStatus)}>\n                      {item.transactionStatus}\n                    </CBadge>\n                  </td>\n                )\n              }}\n           \n            />\n             <div className='text-center pagination-part'>\n        <Pagination\n          current={page}\n          total={totalItems}\n          defaultPageSize={10}\n          showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}\n          onChange={pagination}\n        />\n      </div>\n           \n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Users\n","export default {\n    baseUrl: process.env.REACT_APP_API_END_POINT\n};\nconsole.log(process.env.REACT_APP_API_END_POINT)"],"sourceRoot":""}