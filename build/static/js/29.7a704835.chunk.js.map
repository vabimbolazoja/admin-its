{"version":3,"sources":["views/transactions/tranfer.jsx","config.js"],"names":["Users","useHistory","useState","TransferDatas","setTransferDatas","page","setPage","totalItems","setTotalItems","getBadge","status","useEffect","getTransfers","axios","get","config","baseUrl","headers","Authorization","sessionStorage","getItem","then","res","data","records","map","reference","firstName","sender","lastName","emailAddress","BeneficiaryfirstName","beneficiary","BeneficiarylastName","BeneficiaryemailAddress","amount","currency","Intl","NumberFormat","format","transactionStatus","catch","err","items","fields","key","name","hover","striped","itemsPerPage","activePage","scopedSlots","item","color","clickableRows","className","current","total","showTotal","range","defaultPageSize","onChange","pageSize","console","log","queryString","totalPages","traderXUser","provider","replace","country","getPaged","process"],"mappings":"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","file":"static/js/29.7a704835.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CDataTable,\n  CRow,\n  CPagination\n} from '@coreui/react'\nimport config from '../../config'\nimport axios from 'axios'\nimport { Pagination } from 'antd'\nconst Users = () => {\n  const history = useHistory()\n  const [TransferDatas, setTransferDatas] = useState([])\n  const [page, setPage] = useState(1)\n  const [totalItems, setTotalItems] =  useState(\"\")\n\n  const getBadge = status => {\n    switch (status) {\n      case 'COMPLETED':\n        return 'success'\n      case 'FAILED':\n        return 'secondary'\n      case 'Pending':\n        return 'warning'\n      case 'FAILED':\n        return 'danger'\n      default:\n        return 'primary'\n    }\n  }\n\n  const getPaged = queryString => {\n    axios.get(`${config.baseUrl}/api/v1/admin/transactions/transfer?${queryString}`, {\n      headers: {\n        Authorization: `Bearer ${sessionStorage.getItem('token')}`\n      }\n    })\n    .then(res => {\n      if (res.status === 200) {\n        setTotalItems(res.data.totalPages * 10)\n        setTransferDatas(\n          res.data.records.map(data => ({\n            reference: data.reference,\n            firstName: data.traderXUser.firstName,\n            lastName: data.traderXUser.lastName,\n            emailAddress: data.traderXUser.emailAddress,\n            amount:  data.currency === \"NGN\" ? \"N\" + Intl.NumberFormat(\"en-US\").format(data.amount) : \"$\"  + Intl.NumberFormat(\"en-US\").format(data.amount),\n            provider: data.provider.replace('_', ' '),\n            transactionStatus: data.transactionStatus,\n            \n            country: data.traderXUser.country.replace('_', ' ')\n          }))\n        )\n      }\n    })\n    .catch(err => {\n      if (err) {\n      }\n    })\n}\n\nconst pagination = (page, pageSize) => {\n  console.log(page)\n  setPage(page)\n  const queryString = `pageNumber=${page}&pageSize=10`\n  getPaged(queryString)\n}\n\n  \n\n  useEffect(() => {\n    getTransfers()\n  }, [])\n\n  const getTransfers = () => {\n    axios\n      .get(\n        `${config.baseUrl}/api/v1/admin/transactions/transfer?pageNumber=1&pageSize=10`,\n        {\n          headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('token')}`\n          }\n        }\n      )\n      .then(res => {\n        if (res.status === 200) {\n        \n          setTransferDatas(\n            res.data.records.map(data => ({\n              reference: data.reference,\n              firstName: data.sender.firstName,\n              lastName: data.sender.lastName,\n              emailAddress: data.sender.emailAddress,\n              BeneficiaryfirstName: data.beneficiary.firstName,\n              BeneficiarylastName: data.beneficiary.lastName,\n              BeneficiaryemailAddress: data.beneficiary.emailAddress,\n              amount:  data.currency === \"NGN\" ? \"N\" + Intl.NumberFormat(\"en-US\").format(data.amount) : \"$\"  + Intl.NumberFormat(\"en-US\").format(data.amount),\n              transactionStatus: data.transactionStatus,\n            }))\n          )\n        }\n      })\n      .catch(err => {\n        if (err) {\n        }\n      })\n  }\n\n  return (\n    <CRow>\n      <CCol>\n        <CCard>\n          <CCardHeader>Transfer Transactions</CCardHeader>\n          <CCardBody>\n            <CDataTable\n              items={TransferDatas}\n              fields={[\n                { key: 'reference', name: 'Transaction ID' },\n                { key: 'firstName', name: 'First Name' },\n                { key: 'lastName', name: 'Last Name' },\n                { key: 'emailAddress', name: 'Email Address' },\n                { key: 'BeneficiaryfirstName', name: 'Beneficiary First Name'},\n                { key: 'BeneficiarylastName', name: 'Beneficiary Last Name' },\n                { key: 'BeneficiaryemailAddress', name: 'Beneficiary Email' },\n                { key: 'amount', name: 'Amount' },\n                { key: 'transactionStatus', name: 'Transaction Status' },\n              ]}\n              hover\n              striped\n              itemsPerPage={5}\n              activePage={page}\n              scopedSlots={{\n                transactionStatus: item => (\n                  <td>\n                    <CBadge color={getBadge(item.transactionStatus)}>\n                      {item.transactionStatus}\n                    </CBadge>\n                  </td>\n                )\n              }}\n              clickableRows\n            />\n                <div className='text-center pagination-part'>\n        <Pagination\n          current={page}\n          total={totalItems}\n          showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}\n          defaultPageSize={10}\n          onChange={pagination}\n        />\n      </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n    </CRow>\n  )\n}\n\nexport default Users\n","export default {\n    baseUrl: process.env.REACT_APP_API_END_POINT\n};\nconsole.log(process.env.REACT_APP_API_END_POINT)"],"sourceRoot":""}