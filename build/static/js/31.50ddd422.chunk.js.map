{"version":3,"sources":["views/users/Users.jsx","config.js"],"names":["Users","useHistory","useState","page","setPage","usersData","setUserData","totalItems","setTotalItems","filter","setFilter","reason","setReason","country","setCountry","account","setAccount","identityStatus","setIdentityStatus","reasonBox","setReasonBox","load","setLoad","setMsg","setSuccess","setError","filterBoard","setFilterBoard","userId","setUserId","getPaged","queryString","axios","get","config","baseUrl","headers","Authorization","sessionStorage","getItem","then","res","status","data","records","map","code","createdOn","slice","firstName","lastName","emailAddress","phoneNumber","accountType","identityVerificationStatus","totalPages","catch","err","useEffect","getUsers","changeStatusConfirmSecurity","id","e","preventDefault","Modal","confirm","title","icon","okText","okType","cancelText","onOk","console","log","put","setTimeout","undefined","response","message","accountUnlocked","accountLock","onCancel","changeStatusConfirmPid","removeAccountPid","changeStatusConfirmEmail","triggerEmail","className","onClick","type","color","name","row","md","placeholder","items","fields","key","scopedSlots","Actions","item","class","bind","LOCKED","INACTIVE","PND","ACTIVE","current","total","defaultPageSize","onChange","pageSize","queryStringSearch","showTotal","range","visible","footer","maskClosable","htmlFor","target","value","selected","role","style","width","height","xs","rows","process"],"mappings":"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","file":"static/js/31.50ddd422.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { ExclamationCircleOutlined } from '@ant-design/icons'\n\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CFormGroup,\n  CLabel,\n  CInputGroupPrepend,\n  CInputGroup,\n  CButton,\n  CInput,\n  CSelect,\n  CCol,\n  CTextarea,\n  CDataTable,\n  CRow\n} from '@coreui/react'\nimport { Pagination } from 'antd'\nimport config from '../../config'\nimport axios from 'axios'\nimport CIcon from '@coreui/icons-react'\nimport { Modal } from 'antd'\n\nconst Users = () => {\n  const history = useHistory()\n  const [page, setPage] = useState(1)\n  const [usersData, setUserData] = useState([])\n  const [totalItems, setTotalItems] = useState('')\n  const [filter, setFilter] = useState(false)\n  const [reason, setReason] = useState('')\n  const [country, setCountry] = useState('')\n  const [account, setAccount] = useState('')\n  const [identityStatus, setIdentityStatus] = useState('')\n  const [reasonBox, setReasonBox] = useState(false)\n  const [load, setLoad] = useState(false)\n  const [msg, setMsg] = useState('')\n  const [success, setSuccess] = useState(false)\n  const [error, setError] = useState(false)\n  const [filterBoard, setFilterBoard] = useState(false)\n  const [userId, setUserId] = useState('')\n\n  const cancelReason = () => {\n    setReasonBox(false)\n  }\n\n  const getPaged = queryString => {\n    axios\n      .get(`${config.baseUrl}/api/v1/admin/traderx-users/all?${queryString}`, {\n        headers: {\n          Authorization: `Bearer ${sessionStorage.getItem('token')}`\n        }\n      })\n      .then(res => {\n        if (res.status === 200) {\n          setLoad(false)\n          setUserData(\n            res.data.records.map(data => ({\n              code: data.code,\n              createdOn:  data.createdOn ? data.createdOn.slice(0, 10) : \"\",\n              firstName: data.firstName,\n               lastName: data.lastName,\n               emailAddress: data.emailAddress,\n               phoneNumber:data.phoneNumber,\n               country: data.country,\n               accountType: data.accountType,\n               identityVerificationStatus: data.identityVerificationStatus,\n               status: data.status,\n            }))\n          )\n          setTotalItems(res.data.totalPages * 10)\n          setFilter(false)\n        }\n      })\n      .catch(err => {\n        if (err) {\n        }\n      })\n  }\n\n  const pagination = (page, pageSize) => {\n    console.log(page)\n    setPage(page)\n    const queryString = `pageNumber=${page}&pageSize=10&identityVerificationStatus=&accountType=&country`;\n    const queryStringSearch = `pageNumber=${page}&pageSize=10&identityVerificationStatus=${\n      identityStatus === 'Select' ? '' : identityStatus\n    }&accountType=${account === 'Select' ? '' : account}&country=${\n      country === 'Select' ? '' : country\n    }`\n    getPaged(filterBoard ? queryStringSearch : queryString)\n  }\n\n  useEffect(() => {\n    getUsers()\n  }, [])\n\n  const getUsers = () => {\n    axios\n      .get(\n        `${config.baseUrl}/api/v1/admin/traderx-users/all?pageNumber=1&pageSize=10&identityVerificationStatus=&accountType=&country`,\n        {\n          headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('token')}`\n          }\n        }\n      )\n      .then(res => {\n        if (res.status === 200) {\n          setUserData(\n            res.data.records.map(data => ({\n              code: data.code,\n              createdOn:  data.createdOn ? data.createdOn.slice(0, 10) : \"\",\n              firstName: data.firstName,\n               lastName: data.lastName,\n               emailAddress: data.emailAddress,\n               phoneNumber:data.phoneNumber,\n               country: data.country,\n               accountType: data.accountType,\n               identityVerificationStatus: data.identityVerificationStatus,\n               status: data.status,\n            }))\n          )\n          setLoad(false)\n          setFilterBoard(false)\n          setTotalItems(res.data.totalPages * 10)\n        }\n      })\n      .catch(err => {\n        if (err) {\n        }\n      })\n  }\n\n  const closeFilter = () => {\n    setFilter(false)\n    setCountry('')\n    setAccount('')\n    setIdentityStatus('')\n  }\n\n  const filterUsers = e => {\n    e.preventDefault()\n    setFilter(true)\n  }\n\n  const searchUsersFilter = e => {\n    e.preventDefault()\n    setLoad(true)\n    setFilterBoard(true)\n    const queryString = `pageNumber=${page}&pageSize=10&identityVerificationStatus=${\n      identityStatus === 'Select' ? '' : identityStatus\n    }&accountType=${account === 'Select' ? '' : account}&country=${\n      country === 'Select' ? '' : country\n    }`\n    getPaged(queryString)\n  }\n\n  const accountLock = (id, e) => {\n    console.log(id)\n    setLoad(true)\n    axios\n      .put(\n        `${config.baseUrl}/api/v1/admin/traderx-users/lock-user-account/${id}`,\n        {},\n        {\n          headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('token')}`\n          }\n        }\n      )\n      .then(res => {\n        setLoad(false)\n        if (res.status === 200) {\n          setSuccess(true)\n          setMsg('User Account Locked Successfully')\n          getUsers()\n          setError(false)\n          setTimeout(() => {\n            setSuccess(false)\n          }, 2000)\n        }\n      })\n      .catch(err => {\n        setLoad(false)\n        setSuccess(false)\n        if (err.response !== undefined) {\n          setMsg(err.response.data.message)\n          setError(true)\n          setTimeout(() => {\n            setError(false)\n          }, 2500)\n        } else {\n          setMsg('Connection Error')\n          setError(true)\n          setTimeout(() => {\n            setError(false)\n          }, 2500)\n        }\n      })\n  }\n\n  const accountUnlocked = (id, e) => {\n    console.log(id)\n    setLoad(true)\n    axios\n      .put(\n        `${config.baseUrl}/api/v1/admin/traderx-users/unlock-user-account/${id}`,\n        {},\n        {\n          headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('token')}`\n          }\n        }\n      )\n      .then(res => {\n        setLoad(false)\n        if (res.status === 200) {\n          setSuccess(true)\n          setMsg('User Account Unlocked Successfully')\n          getUsers()\n          setError(false)\n          setTimeout(() => {\n            setSuccess(false)\n          }, 2000)\n        }\n      })\n      .catch(err => {\n        setLoad(false)\n        setSuccess(false)\n        if (err.response !== undefined) {\n          setMsg(err.response.data.message)\n          setError(true)\n          setTimeout(() => {\n            setError(false)\n          }, 2500)\n        } else {\n          setMsg('Connection Error')\n          setError(true)\n          setTimeout(() => {\n            setError(false)\n          }, 2500)\n        }\n      })\n  }\n\n  const changeStatusConfirmSecurity = (id, e) => {\n    e.preventDefault()\n    Modal.confirm({\n      title: `Are you sure you want to ${\n        id.status === 'LOCKED' ? 'Unlock' : 'Lock'\n      } this user?`,\n      icon: <ExclamationCircleOutlined />,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk () {\n        if (id.status === 'LOCKED') {\n          accountUnlocked(id.code)\n        } else {\n          accountLock(id.code)\n        }\n      },\n      onCancel () {\n        console.log('Cancel')\n      }\n    })\n  }\n\n  const changeStatusConfirmPid = (id, e) => {\n    e.preventDefault()\n    Modal.confirm({\n      title: `Are you sure you want to ${\n        id.status === 'INACTIVE' ? 'put' : 'remove'\n      } this user on PID?`,\n      icon: <ExclamationCircleOutlined />,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk () {\n        if (id.status === 'INACTIVE') {\n          setReasonBox(true)\n          setUserId(id.code)\n          // placeAccountPid(id.code)\n        } else {\n          removeAccountPid(id.code)\n        }\n      },\n      onCancel () {\n        console.log('Cancel')\n      }\n    })\n  }\n  const placeAccountPid = () => {\n    setLoad(true)\n    axios\n      .put(\n        `${config.baseUrl}/api/v1/admin/traderx-users/place-user-account-on-pnd/${userId}/${reason}`,\n        {},\n        {\n          headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('token')}`\n          }\n        }\n      )\n      .then(res => {\n        setLoad(false)\n        if (res.status === 200) {\n          setSuccess(true)\n          setLoad(false)\n          setReasonBox(false)\n          setMsg('User Account Placed on PID Successfully')\n          getUsers()\n          setError(false)\n          setTimeout(() => {\n            setSuccess(false)\n          }, 2000)\n        }\n      })\n      .catch(err => {\n        setLoad(false)\n        setSuccess(false)\n        if (err.response !== undefined) {\n          setMsg(err.response.data.message)\n          setError(true)\n          setTimeout(() => {\n            setError(false)\n          }, 2500)\n        } else {\n          setMsg('Connection Error')\n          setError(true)\n          setTimeout(() => {\n            setError(false)\n          }, 2500)\n        }\n      })\n  }\n\n  const removeAccountPid = (id, e) => {\n    console.log(id)\n    setLoad(true)\n    axios\n      .put(\n        `${config.baseUrl}/api/v1/admin/traderx-users/remove-pnd-on-account/${id}`,\n        {},\n        {\n          headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('token')}`\n          }\n        }\n      )\n      .then(res => {\n        setLoad(false)\n        if (res.status === 200) {\n          setSuccess(true)\n          setMsg('User Account Removed on PID Successfully')\n          getUsers()\n          setError(false)\n          setTimeout(() => {\n            setSuccess(false)\n          }, 2000)\n        }\n      })\n      .catch(err => {\n        setLoad(false)\n        setSuccess(false)\n        if (err.response !== undefined) {\n          setMsg(err.response.data.message)\n          setError(true)\n          setTimeout(() => {\n            setError(false)\n          }, 2500)\n        } else {\n          setMsg('Connection Error')\n          setError(true)\n          setTimeout(() => {\n            setError(false)\n          }, 2500)\n        }\n      })\n  } \n\n  const changeStatusConfirmEmail = (id, e) => {\n    e.preventDefault()\n    Modal.confirm({\n      title: `Are you sure you want to triger welcome email ?`,\n      icon: <ExclamationCircleOutlined />,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk () {\n        triggerEmail(id.code)\n      },\n      onCancel () {\n        console.log('Cancel')\n      }\n    })\n  }\n  const triggerEmail = (id, e) => {\n    console.log(id)\n    setLoad(true)\n    axios\n      .put(`${config.baseUrl}/api/v1/admin/traderx-users/trigger-welcome-email/${id}`,{}, {\n        headers: {\n          Authorization: `Bearer ${sessionStorage.getItem('token')}`\n        }\n      })\n      .then(res => {\n        setLoad(false)\n        if (res.status === 200) {\n          setSuccess(true)\n          setMsg('Email Triggered Successfully')\n          getUsers()\n          setError(false)\n          setTimeout(()=>{\n            setSuccess(false)\n          },2000)\n        }\n      })\n      .catch(err => {\n        setLoad(false)\n        setSuccess(false)\n        if (err.response !== undefined) {\n          setMsg(err.response.data.message)\n          setError(true)\n          setTimeout(() => {\n            setError(false)\n          }, 2500)\n        } else {\n          setMsg('Connection Error')\n          setError(true)\n          setTimeout(() => {\n            setError(false)\n          }, 2500)\n        }\n      })\n  }\n\n  return (\n    <CRow>\n      <CCol>\n        <CCard>\n          <CCardHeader>\n            <div className='d-flex justify-content-between align-items-center'>\n              <div> Registered Users</div>\n\n              <CButton onClick={filterUsers} type='button' color='primary'>\n                <CIcon name='cil-magnifying-glass' /> Filter Users by Country,\n                Identitify Verification Status. Account Type{' '}\n              </CButton>\n\n              <CFormGroup row>\n                <CCol md='12'>\n                  <CInputGroup>\n                    <CInputGroupPrepend>\n                      <CButton type='button' color='success'>\n                        <CIcon name='cil-magnifying-glass' /> Search\n                      </CButton>\n                    </CInputGroupPrepend>\n                    <CInput\n                      id='input1-group2'\n                      name='input1-group2'\n                      placeholder='Username'\n                    />\n                  </CInputGroup>\n                </CCol>\n              </CFormGroup>\n            </div>\n          </CCardHeader>\n          <CCardBody>\n            <CDataTable\n              items={usersData}\n              fields={[\n                { key: 'code', name: 'Traderx Code' },\n                { key: 'createdOn', name: 'Registered Date' },\n                { key: 'firstName', name: 'First Name' },\n                { key: 'lastName', name: 'Last Name' },\n                { key: 'emailAddress', name: 'Email Address' },\n                                { key: 'phoneNumber', name: 'Phone Number' },\n                { key: 'country', name: 'Country' },\n                { key: 'accountType', name: 'Account Type' },\n                {\n                  key: 'identityVerificationStatus',\n                  name: 'Identity Verification Status'\n                },\n\n                {\n                  key: 'status',\n                  name: 'Status'\n                },\n                {\n                  key: 'Actions',\n                  name: 'Actions'\n                }\n              ]}\n              scopedSlots={{\n                Actions: item => (\n                  <td className='d-flex'>\n                  {item.status === \"PENDING_EMAIL_VERIFICATION\" &&\n                     <button\n                      type='button'\n                      class='btn btn-primary'\n                      onClick={changeStatusConfirmEmail.bind(this, item)}\n                    >\n                      Trigger Email\n                    </button>}\n                    {item.status === \"LOCKED\" &&\n                    <button\n                      type='button'\n                      class='btn btn-danger mr-2'\n                      onClick={changeStatusConfirmSecurity.bind(this, item)}\n                    >\n                      {\n                        {\n                          LOCKED: 'Unclock User',\n                          INACTIVE: 'Lock User'\n                        }[item.status]\n                      }\n                    </button>}\n\n                    {item.status === 'PND' || item.status === 'ACTIVE' &&\n\n                    <button\n                      type='button'\n                      class='btn btn-info mr-2'\n                      onClick={changeStatusConfirmPid.bind(this, item)}\n                    >\n                      {\n                        {\n                          PND: 'Remove Pnd',\n                          ACTIVE: 'Place Pnd'\n                        }[item.status]\n                      }\n                    </button>}\n\n                  </td>\n                )\n              }}\n            />\n            <div className='text-center pagination-part'>\n              <Pagination\n                current={page}\n                total={totalItems}\n                defaultPageSize={10}\n                onChange={pagination}\n                showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}\n\n              />\n            </div>\n          </CCardBody>\n        </CCard>\n      </CCol>\n\n      <Modal\n        title={'Filter Users'}\n        visible={filter}\n        footer={null}\n        maskClosable={false}\n        onCancel={closeFilter}\n      >\n        <div className='container'>\n          <CFormGroup>\n            <CLabel htmlFor='name'>Country</CLabel>\n            <CSelect\n              id='ccmonth'\n              onChange={e => setCountry(e.target.value)}\n              value={country}\n            >\n              <option selected>Select</option>\n              <option>UNITED_STATES</option>\n              <option>NIGERIA</option>\n            </CSelect>{' '}\n          </CFormGroup>\n          <CFormGroup>\n            <CLabel htmlFor='name'>Account Type</CLabel>\n            <CSelect\n              id='ccmonth'\n              onChange={e => setAccount(e.target.value)}\n              value={account}\n            >\n              <option selected>Select</option>\n              <option>PERSONAL</option>\n              <option>BUSINESS</option>\n            </CSelect>{' '}\n          </CFormGroup>\n          <CFormGroup>\n            <CLabel htmlFor='name'>Identity Verification Status</CLabel>\n            <CSelect\n              id='ccmonth'\n              onChange={e => setIdentityStatus(e.target.value)}\n              value={identityStatus}\n            >\n              <option selected>Select</option>\n\n              <option>APPROVED</option>\n              <option>ACCEPTED</option>\n              <option>NOT DONE</option>\n            </CSelect>{' '}\n          </CFormGroup>\n\n          <div className='text-right'>\n            <CButton onClick={searchUsersFilter} type='button' color='success'>\n              {load ? (\n                <div\n                  class='spinner-border'\n                  role='status'\n                  style={{ width: '1rem', height: '1rem' }}\n                >\n                  <span class='sr-only'>Loading...</span>\n                </div>\n              ) : (\n                <>\n                  <CIcon name='cil-magnifying-glass' /> Search{' '}\n                </>\n              )}\n            </CButton>\n          </div>\n        </div>\n      </Modal>\n\n      <Modal\n        title='Reason For PND'\n        visible={reasonBox}\n        footer={false}\n        onCancel={cancelReason}\n      >\n        <CFormGroup row>\n          <CCol md='3'>\n            <CLabel htmlFor='textarea-input'>Reason</CLabel>\n          </CCol>\n          <CCol xs='12' md='9'>\n            <CTextarea\n              name='textarea-input'\n              id='textarea-input'\n              onChange={e => setReason(e.target.value)}\n              value={reason}\n              rows='9'\n              placeholder='Content...'\n            />\n          </CCol>\n        </CFormGroup>\n\n        <CButton onClick={placeAccountPid} type='button' color='success'>\n          {load ? (\n            <div\n              class='spinner-border'\n              role='status'\n              style={{ width: '1rem', height: '1rem' }}\n            >\n              <span class='sr-only'>Loading...</span>\n            </div>\n          ) : (\n            'Submit'\n          )}\n        </CButton>\n      </Modal>\n    </CRow>\n  )\n}\n\nexport default Users\n","export default {\n    baseUrl: process.env.REACT_APP_API_END_POINT\n};\nconsole.log(process.env.REACT_APP_API_END_POINT)"],"sourceRoot":""}