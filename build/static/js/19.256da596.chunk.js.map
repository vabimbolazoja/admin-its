{"version":3,"sources":["views/Notification-board/notification.jsx","config.js"],"names":["Users","useHistory","queryPage","useLocation","search","match","currentPage","Number","useState","page","setPage","limitData","setLimitData","createSettlement","setCreate","success","setSuccess","deleteSuccess","setDelSuccess","deleteErr","setDelErr","error","setError","msg","setMsg","load","setLoad","limitType","setLimit","scalingThreshold","setThreshold","singleTransactionLimit","setSingleTransaction","dailyCumulativeTransactionLimit","setDailyCumulative","globalLimit","setGlobalLimit","updateState","setUpdateState","id","setID","configDatas","setConfigsData","closeCreate","addLimit","axios","post","config","baseUrl","headers","Authorization","sessionStorage","getItem","then","res","status","getLimitProfileSettlemts","setTimeout","getLimitProfile","catch","err","undefined","response","data","message","get","update","console","log","put","useEffect","map","createdOn","slice","confirmDelete","e","preventDefault","Modal","confirm","title","icon","okText","okType","cancelText","onOk","delete","deleteFunc","onCancel","updateFunc","limitTypes","color","className","type","class","onClick","items","fields","key","name","hover","striped","itemsPerPage","activePage","scopedSlots","Actions","item","bind","clickableRows","visible","footer","maskClosable","htmlFor","required","onChange","target","value","custom","selected","role","style","width","height","process"],"mappings":"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","file":"static/js/19.256da596.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { ExclamationCircleOutlined } from '@ant-design/icons'\nimport {\n  CBadge,\n  CCard,\n  CCardBody,\n  CCardHeader,\n  CCol,\n  CInput,\n  CLabel,\n  CFormGroup,\n  CDataTable,\n  CRow,\n  CSelect,\n  CButton,\n  CAlert,\n  CPagination\n} from '@coreui/react'\nimport config from '../../config'\nimport axios from 'axios'\nimport { Modal } from 'antd'\nconst Users = () => {\n  const history = useHistory()\n  const queryPage = useLocation().search.match(/page=([0-9]+)/, '')\n  const currentPage = Number(queryPage && queryPage[1] ? queryPage[1] : 1)\n  const [page, setPage] = useState(currentPage)\n  const [limitData, setLimitData] = useState([])\n  const [createSettlement, setCreate] = useState(false)\n\n  const [success, setSuccess] = useState(false)\n  const [deleteSuccess, setDelSuccess] = useState(false)\n  const [deleteErr, setDelErr] = useState(false)\n\n  const [error, setError] = useState(false)\n  const [msg, setMsg] = useState('')\n  const [load, setLoad] = useState(false)\n  const [limitType, setLimit] = useState('')\n  const [scalingThreshold, setThreshold] = useState('')\n  const [singleTransactionLimit, setSingleTransaction] = useState('')\n  const [dailyCumulativeTransactionLimit, setDailyCumulative] = useState('')\n  const [globalLimit, setGlobalLimit] = useState('')\n\n  const [updateState, setUpdateState] = useState('')\n  const [id, setID] = useState('')\n  const [configDatas, setConfigsData] = useState({})\n\n  const closeCreate = () => {\n    setCreate(false)\n    setSingleTransaction('')\n    setDailyCumulative('')\n    setLimit('')\n    setGlobalLimit('')\n    setThreshold('')\n  }\n\n  const pageChange = newPage => {\n    currentPage !== newPage &&\n      axios\n        .get(\n          `${config.baseUrl}/api/v1/admin/transactions/transfer?pageNumber=${newPage}&pageSize=10`,\n          {\n            headers: {\n              Authorization: `Bearer ${sessionStorage.getItem('token')}`\n            }\n          }\n        )\n        .then(res => {\n          if (res.status === 200) {\n            setLimitData(\n              res.data.records.map(data => ({\n                reference: data.reference,\n                firstName: data.traderXUser.firstName,\n                id: data.id,\n                lastName: data.traderXUser.lastName,\n                emailAddress: data.traderXUser.emailAddress,\n                amount: Intl.NumberFormat('en-US').format(data.amount),\n                provider: data.provider.replace('_', ' '),\n                transactionStatus: data.transactionStatus,\n\n                country: data.traderXUser.country.replace('_', ' ')\n              }))\n            )\n          }\n        })\n        .catch(err => {\n          if (err) {\n          }\n        })\n  }\n\n  const addLimit = () => {\n    if (\n      limitType &&\n      scalingThreshold &&\n      singleTransactionLimit &&\n      dailyCumulativeTransactionLimit &&\n      globalLimit\n    ) {\n      setLoad(true)\n      axios\n        .post(\n          `${config.baseUrl}/api/v1/admin/limit-profile\n      `,\n          {\n            limitType: limitType,\n            scalingThreshold: scalingThreshold,\n            singleTransactionLimit: singleTransactionLimit,\n            dailyCumulativeTransactionLimit: dailyCumulativeTransactionLimit,\n            globalLimit: globalLimit\n          },\n          {\n            headers: {\n              Authorization: `Bearer ${sessionStorage.getItem('token')}`\n            }\n          }\n        )\n        .then(res => {\n          setLoad(false)\n          if (res.status === 201) {\n            setSuccess(true)\n            setSingleTransaction('')\n            getLimitProfileSettlemts()\n            setDailyCumulative('')\n            setLimit('')\n            setGlobalLimit('')\n            setThreshold('')\n            setMsg('Limit Profile Created Successfully')\n            setTimeout(() => {\n              setMsg('')\n              setCreate(false)\n              setSuccess(false)\n            }, 2500)\n            getLimitProfile()\n          }\n        })\n        .catch(err => {\n          setLoad(false)\n          if (err.response !== undefined) {\n            setMsg(err.response.data.message)\n            setError(true)\n            setSuccess(false)\n            setTimeout(() => {\n              setMsg('')\n              setError(false)\n            }, 2500)\n          } else {\n            setMsg('Connection Error')\n            setError(true)\n            setSuccess(false)\n          }\n        })\n    } else {\n      // setError(true)\n      // setMsg(\"All fie\")\n    }\n  }\n\n  const getLimitProfile = () => {\n    axios\n      .get(`${config.baseUrl}/api/v1/configurations`)\n      .then(res => {\n        if (res.status === 200) {\n          setConfigsData(res.data)\n        }\n      })\n      .catch(err => {\n        if (err) {\n        }\n      })\n  }\n\n  const update = () => {\n    setLoad(true)\n    console.log(id)\n    axios\n      .put(\n        `${config.baseUrl}/api/v1/admin/limit-profile/${id}`,\n        {\n          scalingThreshold: scalingThreshold,\n          singleTransactionLimit: singleTransactionLimit,\n          dailyCumulativeTransactionLimit: dailyCumulativeTransactionLimit,\n          globalLimit: globalLimit\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('token')}`\n          }\n        }\n      )\n      .then(res => {\n        setLoad(false)\n        if (res.status === 200) {\n          setSuccess(true)\n          setSingleTransaction('')\n          getLimitProfileSettlemts()\n          setDailyCumulative('')\n          setLimit('')\n          setGlobalLimit('')\n          setThreshold('')\n          setMsg('Limit Profile Updated Successfully')\n          setTimeout(() => {\n            setMsg('')\n            setSuccess(false)\n            setCreate(false)\n\n          }, 2500)\n          getLimitProfile()\n        }\n      })\n      .catch(err => {\n        setLoad(false)\n        if (err.response !== undefined) {\n          setMsg(err.response.data.message)\n          setError(true)\n          setSuccess(false)\n          setTimeout(() => {\n            setMsg('')\n            setCreate(false)\n            setError(false)\n          }, 2500)\n        } else {\n          setMsg('Connection Error')\n          setError(true)\n          setSuccess(false)\n        }\n      })\n  }\n\n  useEffect(() => {\n    getLimitProfileSettlemts()\n    getLimitProfile()\n    currentPage !== page && setPage(currentPage)\n  }, [currentPage, page])\n\n  const getLimitProfileSettlemts = () => {\n    axios\n      .get(\n        `${config.baseUrl}/api/v1/admin/limit-profile/all\n        `,\n        {\n          headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('token')}`\n          }\n        }\n      )\n      .then(res => {\n        if (res.data) {\n          console.log(limitData)\n          setLimitData(\n            res.data.map(data => ({\n              createdOn: data.createdOn ? data.createdOn.slice(0, 10) : '',\n              limitType: data.limitType,\n              scalingThreshold: data.scalingThreshold,\n              id: data.id,\n              singleTransactionLimit: data.singleTransactionLimit,\n              dailyCumulativeTransactionLimit:\n                data.dailyCumulativeTransactionLimit,\n              globalLimit: data.globalLimit\n            }))\n          )\n        }\n      })\n      .catch(err => {\n        if (err) {\n        }\n      })\n  }\n\n  const deleteFunc = id => {\n    console.log(id)\n    setLoad(true)\n    axios\n      .delete(\n        `${config.baseUrl}/api/v1/admin/limit-profile/${id.id}\n      `,\n        {\n          headers: {\n            Authorization: `Bearer ${sessionStorage.getItem('token')}`\n          }\n        }\n      )\n      .then(res => {\n        setLoad(false)\n        if (res.status === 200) {\n          setDelSuccess(true)\n          setMsg('Limit Profile Deleted Successfully')\n          getLimitProfileSettlemts()\n          setTimeout(() => {\n            setMsg('')\n            setDelSuccess(false)\n          }, 2500)\n          getLimitProfile()\n        }\n      })\n      .catch(err => {\n        setLoad(false)\n        if (err.response !== undefined) {\n          setMsg(err.response.data.message)\n          setDelErr(true)\n          setTimeout(() => {\n            setMsg('')\n            setDelErr(false)\n          }, 2500)\n        } else {\n          setMsg('Connection Error')\n          setDelErr(false)\n        }\n      })\n  }\n\n  const confirmDelete = (id, e) => {\n    e.preventDefault()\n    Modal.confirm({\n      title: `Are you sure you want to delete this limi profile?`,\n      icon: <ExclamationCircleOutlined />,\n      okText: 'Yes',\n      okType: 'danger',\n      cancelText: 'No',\n      onOk () {\n        deleteFunc(id)\n      },\n      onCancel () {\n        console.log('Cancel')\n      }\n    })\n  }\n  const createSettlementFunc = () => {\n    setUpdateState(false)\n    setCreate(true)\n  }\n\n  const updateFunc = id => {\n    console.log(id)\n    setID(id.id)\n    setLimit(id.limitType)\n    setSingleTransaction(id.singleTransactionLimit)\n    setDailyCumulative(id.dailyCumulativeTransactionLimit)\n    setThreshold(id.scalingThreshold)\n    setGlobalLimit(id.globalLimit)\n    setUpdateState(true)\n    setCreate(true)\n  }\n\n  return (\n    <>\n      {configDatas.limitTypes && (\n        <CRow>\n          <CCol>\n            {deleteSuccess && <CAlert color='success'>{msg}</CAlert>}\n\n            {deleteErr && <CAlert color='danger'>{msg}</CAlert>}\n            <CCard>\n              <CCardHeader>\n                <div className='d-flex justify-content-between align-items-center'>\n                  <div>Notification Board </div>\n                  <button\n                    type='button'\n                    class='btn btn-primary mr-2'\n                    onClick={createSettlementFunc}\n                  >\n                    Create Notification\n                  </button>\n                </div>\n              </CCardHeader>\n              <CCardBody>\n                <CDataTable\n                  items={limitData}\n                  fields={[\n                    { key: 'createdOn', name: 'Created On' },\n                    { key: 'limitType', name: 'Limit Type' },\n                    {\n                      key: 'dailyCumulativeTransactionLimit',\n                      name: 'Daily Cummulative Transaction Limit'\n                    },\n                    { key: 'scalingThreshold', name: 'Scaling Thresold' },\n                    {\n                      key: 'singleTransactionLimit',\n                      name: 'Single Transaction Limit'\n                    },\n\n                    {\n                      key: 'Actions',\n                      name: 'Actions'\n                    }\n                  ]}\n                  hover\n                  striped\n                  itemsPerPage={5}\n                  activePage={page}\n                  scopedSlots={{\n                    Actions: item => (\n                      <td className='d-flex'>\n                        <button\n                          type='button'\n                          class='btn btn-success mr-2'\n                          onClick={updateFunc.bind(this, item)}\n                        >\n                          Update\n                        </button>\n                        <button\n                          type='button'\n                          class='btn btn-danger'\n                          onClick={confirmDelete.bind(this, item)}\n                        >\n                          Delete\n                        </button>\n                      </td>\n                    )\n                  }}\n                  clickableRows\n                />\n                {/* <CPagination\n                  activePage={page}\n                  onActivePageChange={pageChange}\n                  pages={5}\n                  doubleArrows={false}\n                  align='center'\n                /> */}\n              </CCardBody>\n            </CCard>\n          </CCol>\n\n          <Modal\n            title={\n              updateState ? 'Update Limit Profile' : 'Create Limit Profile'\n            }\n            visible={createSettlement}\n            footer={null}\n            maskClosable={false}\n            onCancel={closeCreate}\n          >\n            <div className='container'>\n              <form>\n                {success && <CAlert color='success'>{msg}</CAlert>}\n\n                {error && <CAlert color='danger'>{msg}</CAlert>}\n                {!updateState ? (\n                  <>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Limit Type</CLabel>\n                      <CSelect\n                        custom\n                        name='ccmonth'\n                        id='ccmonth'\n                        onChange={e => setLimit(e.target.value)}\n                        value={limitType}\n                      >\n                        <option selected>Select</option>\n                        {configDatas.limitTypes.map(data => {\n                          return <option value={data}>{data}</option>\n                        })}\n                      </CSelect>{' '}\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Scaling Threshold</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setThreshold(e.target.value)}\n                        value={scalingThreshold}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Single Transaction Limit</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setSingleTransaction(e.target.value)}\n                        value={singleTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>\n                        Daily Cummulative Transaction Limit\n                      </CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setDailyCumulative(e.target.value)}\n                        value={dailyCumulativeTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Global Limit</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setGlobalLimit(e.target.value)}\n                        value={globalLimit}\n                      />\n                    </CFormGroup>\n                  </>\n                ) : (\n                  <>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Scaling Threshold</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setThreshold(e.target.value)}\n                        value={scalingThreshold}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Single Transaction Limit</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setSingleTransaction(e.target.value)}\n                        value={singleTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>\n                        Daily Cummulative Transaction Limit\n                      </CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setDailyCumulative(e.target.value)}\n                        value={dailyCumulativeTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Global Limit</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setGlobalLimit(e.target.value)}\n                        value={globalLimit}\n                      />\n                    </CFormGroup>\n                  </>\n                )}\n                <br />\n                <div className='d-flex justify-content-end'>\n                  <button\n                    type='button'\n                    class='btn btn-primary mr-2'\n                    onClick={!updateState ? addLimit : update}\n                  >\n                     {load ? (\n                            <div\n                              class='spinner-border'\n                              role='status'\n                              style={{ width: '1rem', height: '1rem' }}\n                            >\n                              <span class='sr-only'>Loading...</span>\n                            </div>\n                          ) : (\n                            'Submit'\n                          )}\n                  </button>\n                </div>\n              </form>\n            </div>\n          </Modal>\n            <Modal\n            title={\n              updateState ? 'Update Limit Profile' : 'Create Limit Profile'\n            }\n            visible={createSettlement}\n            footer={null}\n            maskClosable={false}\n            onCancel={closeCreate}\n          >\n            <div className='container'>\n              <form>\n                {success && <CAlert color='success'>{msg}</CAlert>}\n\n                {error && <CAlert color='danger'>{msg}</CAlert>}\n                {!updateState ? (\n                  <>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Limit Type</CLabel>\n                      <CSelect\n                        custom\n                        name='ccmonth'\n                        id='ccmonth'\n                        onChange={e => setLimit(e.target.value)}\n                        value={limitType}\n                      >\n                        <option selected>Select</option>\n                        {configDatas.limitTypes.map(data => {\n                          return <option value={data}>{data}</option>\n                        })}\n                      </CSelect>{' '}\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Scaling Threshold</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setThreshold(e.target.value)}\n                        value={scalingThreshold}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Single Transaction Limit</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setSingleTransaction(e.target.value)}\n                        value={singleTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>\n                        Daily Cummulative Transaction Limit\n                      </CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setDailyCumulative(e.target.value)}\n                        value={dailyCumulativeTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Global Limit</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setGlobalLimit(e.target.value)}\n                        value={globalLimit}\n                      />\n                    </CFormGroup>\n                  </>\n                ) : (\n                  <>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Scaling Threshold</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setThreshold(e.target.value)}\n                        value={scalingThreshold}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Single Transaction Limit</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setSingleTransaction(e.target.value)}\n                        value={singleTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>\n                        Daily Cummulative Transaction Limit\n                      </CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setDailyCumulative(e.target.value)}\n                        value={dailyCumulativeTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Global Limit</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setGlobalLimit(e.target.value)}\n                        value={globalLimit}\n                      />\n                    </CFormGroup>\n                  </>\n                )}\n                <br />\n                <div className='d-flex justify-content-end'>\n                  <button\n                    type='button'\n                    class='btn btn-primary mr-2'\n                    onClick={!updateState ? addLimit : update}\n                  >\n                     {load ? (\n                            <div\n                              class='spinner-border'\n                              role='status'\n                              style={{ width: '1rem', height: '1rem' }}\n                            >\n                              <span class='sr-only'>Loading...</span>\n                            </div>\n                          ) : (\n                            'Submit'\n                          )}\n                  </button>\n                </div>\n              </form>\n            </div>\n          </Modal>\n            <Modal\n            title={\n              updateState ? 'Update Limit Profile' : 'Create Limit Profile'\n            }\n            visible={createSettlement}\n            footer={null}\n            maskClosable={false}\n            onCancel={closeCreate}\n          >\n            <div className='container'>\n              <form>\n                {success && <CAlert color='success'>{msg}</CAlert>}\n\n                {error && <CAlert color='danger'>{msg}</CAlert>}\n                {!updateState ? (\n                  <>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Limit Type</CLabel>\n                      <CSelect\n                        custom\n                        name='ccmonth'\n                        id='ccmonth'\n                        onChange={e => setLimit(e.target.value)}\n                        value={limitType}\n                      >\n                        <option selected>Select</option>\n                        {configDatas.limitTypes.map(data => {\n                          return <option value={data}>{data}</option>\n                        })}\n                      </CSelect>{' '}\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Scaling Threshold</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setThreshold(e.target.value)}\n                        value={scalingThreshold}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Single Transaction Limit</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setSingleTransaction(e.target.value)}\n                        value={singleTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>\n                        Daily Cummulative Transaction Limit\n                      </CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setDailyCumulative(e.target.value)}\n                        value={dailyCumulativeTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Global Limit</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setGlobalLimit(e.target.value)}\n                        value={globalLimit}\n                      />\n                    </CFormGroup>\n                  </>\n                ) : (\n                  <>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Scaling Threshold</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setThreshold(e.target.value)}\n                        value={scalingThreshold}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Single Transaction Limit</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setSingleTransaction(e.target.value)}\n                        value={singleTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>\n                        Daily Cummulative Transaction Limit\n                      </CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setDailyCumulative(e.target.value)}\n                        value={dailyCumulativeTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Global Limit</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setGlobalLimit(e.target.value)}\n                        value={globalLimit}\n                      />\n                    </CFormGroup>\n                  </>\n                )}\n                <br />\n                <div className='d-flex justify-content-end'>\n                  <button\n                    type='button'\n                    class='btn btn-primary mr-2'\n                    onClick={!updateState ? addLimit : update}\n                  >\n                     {load ? (\n                            <div\n                              class='spinner-border'\n                              role='status'\n                              style={{ width: '1rem', height: '1rem' }}\n                            >\n                              <span class='sr-only'>Loading...</span>\n                            </div>\n                          ) : (\n                            'Submit'\n                          )}\n                  </button>\n                </div>\n              </form>\n            </div>\n          </Modal>\n            <Modal\n            title={\n              updateState ? 'Update Limit Profile' : 'Create Limit Profile'\n            }\n            visible={createSettlement}\n            footer={null}\n            maskClosable={false}\n            onCancel={closeCreate}\n          >\n            <div className='container'>\n              <form>\n                {success && <CAlert color='success'>{msg}</CAlert>}\n\n                {error && <CAlert color='danger'>{msg}</CAlert>}\n                {!updateState ? (\n                  <>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Limit Type</CLabel>\n                      <CSelect\n                        custom\n                        name='ccmonth'\n                        id='ccmonth'\n                        onChange={e => setLimit(e.target.value)}\n                        value={limitType}\n                      >\n                        <option selected>Select</option>\n                        {configDatas.limitTypes.map(data => {\n                          return <option value={data}>{data}</option>\n                        })}\n                      </CSelect>{' '}\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Scaling Threshold</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setThreshold(e.target.value)}\n                        value={scalingThreshold}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Single Transaction Limit</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setSingleTransaction(e.target.value)}\n                        value={singleTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>\n                        Daily Cummulative Transaction Limit\n                      </CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setDailyCumulative(e.target.value)}\n                        value={dailyCumulativeTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Global Limit</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setGlobalLimit(e.target.value)}\n                        value={globalLimit}\n                      />\n                    </CFormGroup>\n                  </>\n                ) : (\n                  <>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Scaling Threshold</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setThreshold(e.target.value)}\n                        value={scalingThreshold}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Single Transaction Limit</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setSingleTransaction(e.target.value)}\n                        value={singleTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>\n                        Daily Cummulative Transaction Limit\n                      </CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setDailyCumulative(e.target.value)}\n                        value={dailyCumulativeTransactionLimit}\n                      />\n                    </CFormGroup>\n                    <CFormGroup>\n                      <CLabel htmlFor='name'>Global Limit</CLabel>\n                      <CInput\n                        id='name'\n                        type='number'\n                        required\n                        onChange={e => setGlobalLimit(e.target.value)}\n                        value={globalLimit}\n                      />\n                    </CFormGroup>\n                  </>\n                )}\n                <br />\n                <div className='d-flex justify-content-end'>\n                  <button\n                    type='button'\n                    class='btn btn-primary mr-2'\n                    onClick={!updateState ? addLimit : update}\n                  >\n                     {load ? (\n                            <div\n                              class='spinner-border'\n                              role='status'\n                              style={{ width: '1rem', height: '1rem' }}\n                            >\n                              <span class='sr-only'>Loading...</span>\n                            </div>\n                          ) : (\n                            'Submit'\n                          )}\n                  </button>\n                </div>\n              </form>\n            </div>\n          </Modal>\n        </CRow>\n      )}\n    </>\n  )\n}\n\nexport default Users\n","export default {\n    baseUrl: process.env.REACT_APP_API_END_POINT\n};\nconsole.log(process.env.REACT_APP_API_END_POINT)"],"sourceRoot":""}